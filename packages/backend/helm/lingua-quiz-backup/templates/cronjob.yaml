apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "lingua-quiz-backup.fullname" . }}
  labels:
    {{- include "lingua-quiz-backup.labels" . | nindent 4 }}
spec:
  schedule: {{ .Values.schedule | quote }}
  concurrencyPolicy: {{ .Values.concurrencyPolicy }}
  successfulJobsHistoryLimit: {{ .Values.successfulJobsHistoryLimit }}
  failedJobsHistoryLimit: {{ .Values.failedJobsHistoryLimit }}
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: postgres-backup
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              env:
                # Reference the PostgreSQL secret created by the main chart
                # The name is passed via values.yaml (postgresSecretName)
                - name: POSTGRES_DB
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.postgresSecretName }}
                      key: POSTGRES_DB
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.postgresSecretName }}
                      key: POSTGRES_USER
                - name: PGPASSWORD # pg_dump uses this env var
                  valueFrom:
                    secretKeyRef:
                      name: {{ .Values.postgresSecretName }}
                      key: POSTGRES_PASSWORD
                # Construct the Postgres service name from the main app's release name
                - name: POSTGRES_HOST
                  value: "{{ .Values.mainAppReleaseName }}-postgres"
                # Reference the spaces credentials secret created by this chart
                - name: SPACES_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "lingua-quiz-backup.fullname" . }}-spaces-credentials
                      key: SPACES_ACCESS_KEY_ID
                - name: SPACES_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{ include "lingua-quiz-backup.fullname" . }}-spaces-credentials
                      key: SPACES_SECRET_KEY
                # Spaces Configuration from values
                - name: SPACES_ENDPOINT_URL
                  value: {{ .Values.spaces.endpointUrl | quote }}
                - name: SPACES_BUCKET_NAME
                  value: {{ .Values.spaces.bucketName | quote }}
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -e
                  echo "Starting PostgreSQL backup process..."
                  BACKUP_FILE="/backup/backup-$(date +%Y-%m-%dT%H-%M-%S).dump"

                  echo "Creating dump file: ${BACKUP_FILE}"
                  # Use -Fc for custom-format archive, suitable for pg_restore
                  pg_dump -U $POSTGRES_USER -h $POSTGRES_HOST -d $POSTGRES_DB -Fc -f $BACKUP_FILE
                  echo "Dump created successfully."

                  echo "Configuring mc..."
                  mc alias set spaces https://${SPACES_ENDPOINT_URL} ${SPACES_ACCESS_KEY_ID} ${SPACES_SECRET_KEY}
                  echo "mc configured."

                  TARGET_PATH="spaces/${SPACES_BUCKET_NAME}/backups/${BACKUP_FILE##*/}" # Path in bucket
                  echo "Uploading ${BACKUP_FILE} to ${TARGET_PATH}..."
                  mc cp ${BACKUP_FILE} ${TARGET_PATH}
                  echo "Upload complete."

                  echo "Cleaning up local file..."
                  rm ${BACKUP_FILE}
                  echo "Backup process finished successfully."
              volumeMounts:
                - name: backup-volume
                  mountPath: /backup
          volumes:
            - name: backup-volume
              emptyDir: {} # Use emptyDir for temporary storage during the job run
          restartPolicy: OnFailure # Job pods should run to completion or fail