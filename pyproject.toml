# Python project configuration
# Consolidated configuration for ruff (replaces: black, isort, flake8, autoflake)

[tool.ruff]
target-version = "py313"
line-length = 150
indent-width = 4

# Exclude directories
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    "node_modules",
    "dist",
    "build",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable recommended rules
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort (import sorting)
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

ignore = [
    "E203",   # Whitespace before ':' (conflicts with black/ruff-format)
    "E501",   # Line too long (handled by formatter)
    "EM101",  # Exception string literals (too strict for FastAPI)
    "EM102",  # Exception f-string literals (too strict for FastAPI)
    "PLW1508", # Invalid env variable default type (false positive for int/bool defaults)
    "PLW0603", # global statement (sometimes necessary for singletons)
    "PLW2901", # Loop variable overwritten (intentional pattern)
    "PLR0912", # Too many branches (complexity check, project-specific)
    "PLR0913", # Too many arguments
    "PLR0911", # Too many return statements (complexity check, project-specific)
    "PLR2004", # Magic value comparison
    "B008",   # Function calls in defaults (common FastAPI pattern with Depends())
    "B904",   # raise from err (requires refactoring for proper exception chaining)
    "SIM103", # Return condition directly (stylistic preference)
    "SIM105", # Use contextlib.suppress (stylistic preference)
    "RET504", # Unnecessary assignment before return (stylistic preference)
    "PTH123", # Use Path.open() (requires refactoring, defer)
    "PLC0415", # import at top-level (sometimes needed for lazy imports)
    "DTZ003", # datetime.utcnow() (requires refactoring to timezone-aware)
    "DTZ005", # datetime.now() without tz (requires refactoring to timezone-aware)
    "N815",   # mixedCase in class (intentional for API schemas/Pydantic models)
    "RUF013", # Implicit Optional (PEP 484, requires signature changes)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "S101",   # Allow assert in tests
    "PLR2004", # Allow magic values in tests
    "PT018",  # Allow complex assertions in tests
    "B007",   # Allow unused loop variables in tests
]
"**/test_*.py" = [
    "S101",
    "PLR2004",
    "PT018",
    "B007",
]

[tool.ruff.lint.isort]
known-first-party = ["lingua_quiz"]
force-sort-within-sections = true

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "lf"

[tool.mypy]
python_version = "3.13"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
check_untyped_defs = true
ignore_missing_imports = true
no_implicit_optional = true
show_error_codes = true

[tool.bandit]
exclude_dirs = ["tests", "*/test_*.py"]
skips = ["B101"]  # Allow assert

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests", "packages/backend/tests", "packages/integration-tests/tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--showlocals",
]
