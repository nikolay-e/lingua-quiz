.
├── .eslintrc.js
│   Content:
│       module.exports = {
│         env: {
│           browser: true,
│           es2021: true,
│           mocha: true,
│         },
│         extends: ['airbnb-base', 'plugin:prettier/recommended'],
│         overrides: [],
│         parserOptions: {
│           ecmaVersion: 'latest',
│           sourceType: 'module',
│         },
│         plugins: ['prettier', 'mocha'],
│         rules: {
│           'prettier/prettier': [
│             'error',
│             {
│               printWidth: 100,
│               singleQuote: true,
│               trailingComma: 'es5',
│             },
│           ],
│           'no-console': ['error', { allow: ['warn', 'error'] }],
│           'max-len': ['error', { code: 100 }],
│           'import/no-mutable-exports': 'off',
│           'import/extensions': 'off',
│         },
│       };
├── .github
│   ├── scripts
│   │   ├── ai_code_review.py
│   │   │   Content:
│   │   │       import os
│   │   │       import logging
│   │   │       import time
│   │   │       from typing import List, Dict, Optional
│   │   │       import github
│   │   │       from openai import OpenAI
│   │   │       from utils import (
│   │   │           get_env_variable, init_github_client, get_repo_content, get_pr_diff,
│   │   │           sanitize_input, post_review, count_tokens, split_codebase
│   │   │       )
│   │   │       from config import OPENAI_MODEL, TOKEN_RESET_PERIOD, MAX_CHUNK_SIZE
│   │   │       
│   │   │       # Set up logging
│   │   │       logging.basicConfig(level=logging.INFO)
│   │   │       logger = logging.getLogger(__name__)
│   │   │       
│   │   │       def init_openai_client() -> OpenAI:
│   │   │           """Initialize and return the OpenAI client."""
│   │   │           api_key = get_env_variable("OPENAI_API_KEY")
│   │   │           return OpenAI(api_key=api_key)
│   │   │       
│   │   │       def analyze_codebase(client: OpenAI, repo_content: str) -> str:
│   │   │           """Analyze the entire codebase or large chunks of it."""
│   │   │           chunks = split_codebase(repo_content)
│   │   │           analyses = []
│   │   │       
│   │   │           for i, chunk in enumerate(chunks):
│   │   │               try:           
│   │   │                   system_message = """You are an expert code analyzer preparing information for a pull request review. Analyze the given code and provide:
│   │   │                   1. A concise summary of key aspects.
│   │   │                   2. Main functions, classes, or components and their purposes.
│   │   │                   3. Important patterns, architectural decisions, or coding styles.
│   │   │                   4. Potential areas of interest for a code review (e.g., complex logic, security-sensitive parts).
│   │   │                   5. Any other observations relevant for reviewing changes in a pull request context."""
│   │   │       
│   │   │                   user_message = f"""Analyze the following code and provide a structured summary:
│   │   │       
│   │   │                   {chunk}
│   │   │       
│   │   │                   Structure your response as follows:
│   │   │                   1. Overview
│   │   │                   2. Key Components
│   │   │                   3. Notable Patterns/Decisions
│   │   │                   4. Review Focus Areas
│   │   │                   5. Additional Notes"""
│   │   │       
│   │   │                   response = client.chat.completions.create(
│   │   │                       model=OPENAI_MODEL,
│   │   │                       messages=[
│   │   │                           {"role": "system", "content": system_message},
│   │   │                           {"role": "user", "content": user_message}
│   │   │                       ]
│   │   │                   )
│   │   │                   analyses.append(response.choices[0].message.content)
│   │   │                   logger.info(f"Completed analysis of chunk {i+1}/{len(chunks)}")
│   │   │                   time.sleep(TOKEN_RESET_PERIOD)
│   │   │               except Exception as e:
│   │   │                   logger.error(f"OpenAI API error during chunk {i+1} analysis: {str(e)}")
│   │   │                   analyses.append(f"Error occurred during analysis of chunk {i+1}: {str(e)}")
│   │   │       
│   │   │           return "\n\n".join(analyses)
│   │   │       
│   │   │       def review_code(client: OpenAI, repo_content: str, pr_diff: str, pr_title: str, pr_body: Optional[str]) -> str:
│   │   │           """Perform AI code review using OpenAI API, and decide on merge readiness."""
│   │   │           total_tokens = count_tokens(repo_content) + count_tokens(pr_diff)
│   │   │           
│   │   │           if total_tokens <= MAX_CHUNK_SIZE:
│   │   │               logger.info("Entire codebase and PR diff fit within token limit. Proceeding with direct review.")
│   │   │               content_to_review = f"Codebase:\n{repo_content}\n\nPR Diff:\n{pr_diff}"
│   │   │           else:
│   │   │               logger.info("Codebase and PR diff exceed token limit. Performing separate analysis.")
│   │   │               logger.info("Starting codebase analysis")
│   │   │               codebase_analysis = analyze_codebase(client, repo_content)
│   │   │               logger.info("Completed codebase analysis")
│   │   │               content_to_review = f"Codebase Analysis:\n{codebase_analysis}\n\nPR Diff:\n{pr_diff}"
│   │   │           
│   │   │           sanitized_title = sanitize_input(pr_title)
│   │   │           sanitized_body = sanitize_input(pr_body)
│   │   │           
│   │   │           final_review_prompt = f"""
│   │   │           Based on the following information:
│   │   │       
│   │   │           {content_to_review}
│   │   │       
│   │   │           Please review this pull request:
│   │   │       
│   │   │           PR Title: {sanitized_title}
│   │   │           PR Body: {sanitized_body}
│   │   │       
│   │   │           Provide:
│   │   │           1. Feedback on:
│   │   │              a. Potential bugs or errors
│   │   │              b. Suggestions for improvement
│   │   │              c. Any security concerns
│   │   │              d. Overall design and architecture considerations - dont mention documentation
│   │   │           2. A suggested better short commit message based on the changes and the provided PR title and body
│   │   │           3. A decision on whether the code is ready to be merged (YES/NO) with a brief explanation. Be consise. Always add file name. Be specific. Before suggestions recheck yourself it what you want to suggest makes sense
│   │   │       
│   │   │           Structure your response as follows:
│   │   │           Code Review:
│   │   │           [Your review here]
│   │   │       
│   │   │           Suggested Short Commit Message:
│   │   │           [Your suggested short commit message here, max 8 words, dont use buzz words, be consise, be specific, keep it short]
│   │   │       
│   │   │           Merge Decision:[YES/NO]
│   │   │               - [file path]: [Brief explanation what should be fixed. Be consise. Be specific. Before suggestions recheck yourself it what you want to suggest makes sense. Dont deny the PR if only documentation is missing.]
│   │   │           """
│   │   │       
│   │   │           try:        
│   │   │               logger.info("Sending final review request to OpenAI")
│   │   │               response = client.chat.completions.create(
│   │   │                   model=OPENAI_MODEL,
│   │   │                   messages=[
│   │   │                       {"role": "system", "content": "You are an expert code reviewer. Provide a comprehensive review based on the provided codebase analysis and pull request details."},
│   │   │                       {"role": "user", "content": final_review_prompt}
│   │   │                   ]
│   │   │               )
│   │   │               logger.info("Received final review response from OpenAI")
│   │   │               return response.choices[0].message.content
│   │   │       
│   │   │           except Exception as e:
│   │   │               logger.error(f"OpenAI API error during final review: {str(e)}")
│   │   │               return f"Error occurred during code review: {str(e)}"
│   │   │       
│   │   │       def extract_merge_decision(review: str) -> bool:
│   │   │           merge_decision_section = review.split("Merge Decision:")[-1].strip()
│   │   │           decision = merge_decision_section.split(":")[0].strip().upper()
│   │   │           return decision == "YES"
│   │   │       
│   │   │       def main():
│   │   │           try:
│   │   │               logger.info("Starting code review process")
│   │   │               openai_client = init_openai_client()
│   │   │               pull_request = init_github_client()
│   │   │               repo = pull_request.base.repo
│   │   │               logger.info("Fetching repository content")
│   │   │               repo_content = get_repo_content(repo, pull_request.base.ref)
│   │   │               logger.info("Fetching pull request diff")
│   │   │               pr_diff = get_pr_diff(pull_request)
│   │   │               logger.info("Starting code review")
│   │   │               review = review_code(openai_client, repo_content, pr_diff, pull_request.title, pull_request.body)
│   │   │               logger.info("Posting review")
│   │   │               post_review(pull_request, review)
│   │   │               logger.info("Code review process completed successfully")
│   │   │               merge_decision = extract_merge_decision(review)
│   │   │               print(f"MERGE_DECISION={'success' if merge_decision else 'failure'}")
│   │   │               return merge_decision
│   │   │           except ValueError as e:
│   │   │               logger.error(f"Configuration error: {str(e)}")
│   │   │               return False
│   │   │           except github.GithubException as e:
│   │   │               logger.error(f"GitHub API error: {str(e)}")
│   │   │               return False
│   │   │           except Exception as e:
│   │   │               logger.error(f"An unexpected error occurred: {str(e)}")
│   │   │               return False
│   │   │       
│   │   │       if __name__ == "__main__":
│   │   │           main()
│   │   ├── cleanup-cluster.js
│   │   │   Content:
│   │   │       module.exports = async ({github, context, core, exec}) => {
│   │   │         console.log("Cleaning up resources...");
│   │   │       
│   │   │         await exec.exec('kubectl', ['delete', 'deployment', 'lingua-quiz-backend', '-n', process.env.DEPLOY_NAMESPACE, '--ignore-not-found']);
│   │   │       
│   │   │         if (process.env.DEPLOY_NAMESPACE === 'test') {
│   │   │           await exec.exec('kubectl', ['delete', 'deployment', 'postgres', '-n', 'test', '--ignore-not-found']);
│   │   │           await exec.exec('kubectl', ['delete', 'service', 'postgres', '-n', 'test', '--ignore-not-found']);
│   │   │           await exec.exec('kubectl', ['delete', 'secret', 'postgres-secret', '-n', 'test', '--ignore-not-found']);
│   │   │           await exec.exec('kubectl', ['delete', 'secret', 'jwt-secret', '-n', 'test', '--ignore-not-found']);
│   │   │           await exec.exec('kubectl', ['delete', 'secret', 'tls-secret', '-n', 'test', '--ignore-not-found']);
│   │   │         }
│   │   │       
│   │   │         console.log("Cleanup completed.");
│   │   │       };
│   │   ├── config.py
│   │   │   Content:
│   │   │       # config.py
│   │   │       
│   │   │       # Configuration
│   │   │       SUPPORTED_FILE_TYPES = ('.py', '.js', '.ts', '.html', '.css', '.yml', '.yaml', '.json', '.md', '.txt')
│   │   │       EXCLUDE_FOLDERS = {'.git', '.github', 'data', 'node_modules', 'venv'}
│   │   │       EXCLUDE_FILES = {'package-lock.json'}
│   │   │       
│   │   │       OPENAI_MODEL = "gpt-4-turbo"
│   │   │       TOKEN_RESET_PERIOD = 60  # seconds
│   │   │       MAX_CHUNK_SIZE = 30000  # Increased to 30,000 tokens
│   │   └── utils.py
│   │       Content:
│   │           import os
│   │           import logging
│   │           import github
│   │           import html
│   │           import tiktoken
│   │           from typing import List, Optional
│   │           from config import OPENAI_MODEL, MAX_CHUNK_SIZE, EXCLUDE_FOLDERS, EXCLUDE_FILES, SUPPORTED_FILE_TYPES
│   │           
│   │           logger = logging.getLogger(__name__)
│   │           
│   │           OPENAI_MODEL = "gpt-4-turbo"
│   │           MAX_CHUNK_SIZE = 30000
│   │           
│   │           def get_env_variable(name: str) -> str:
│   │               """Safely retrieve environment variables."""
│   │               value = os.environ.get(name)
│   │               if not value:
│   │                   raise ValueError(f"{name} environment variable is not set")
│   │               return value
│   │           
│   │           def init_github_client() -> github.PullRequest.PullRequest:
│   │               """Initialize GitHub client and return the current pull request."""
│   │               github_token = get_env_variable("GITHUB_TOKEN")
│   │               repo_name = get_env_variable("GITHUB_REPOSITORY")
│   │               pr_number = parse_pr_number(get_env_variable("GITHUB_REF"))
│   │           
│   │               try:
│   │                   g = github.Github(github_token)
│   │                   repo = g.get_repo(repo_name)
│   │                   return repo.get_pull(pr_number)
│   │               except github.GithubException as e:
│   │                   logger.error(f"GitHub API error: {str(e)}")
│   │                   raise
│   │               except Exception as e:
│   │                   logger.error(f"Unexpected error when initializing GitHub client: {str(e)}")
│   │                   raise
│   │           
│   │           def parse_pr_number(github_ref: str) -> int:
│   │               """Parse PR number from GITHUB_REF safely."""
│   │               try:
│   │                   return int(github_ref.split("/")[-2])
│   │               except (IndexError, ValueError):
│   │                   raise ValueError(f"Invalid GITHUB_REF format: {github_ref}")
│   │           
│   │           def get_repo_content(repo: github.Repository.Repository, branch: str) -> str:
│   │               """Get the content of all files in the repository, excluding specified folders and files."""
│   │               content = ""
│   │               try:
│   │                   contents = repo.get_contents("", ref=branch)
│   │                   while contents:
│   │                       file_content = contents.pop(0)
│   │                       path_parts = file_content.path.split('/')
│   │           
│   │                       if file_content.type == "dir":
│   │                           if path_parts[-1] not in EXCLUDE_FOLDERS:
│   │                               contents.extend(repo.get_contents(file_content.path, ref=branch))
│   │                       else:
│   │                           if (file_content.name not in EXCLUDE_FILES and
│   │                               not any(folder in EXCLUDE_FOLDERS for folder in path_parts[:-1]) and
│   │                               file_content.name.endswith(SUPPORTED_FILE_TYPES)):
│   │                               content += f"File: {file_content.path}\n```\n{file_content.decoded_content.decode('utf-8')}\n```\n\n"
│   │               except github.GithubException as e:
│   │                   logger.error(f"GitHub API error when fetching repo content: {str(e)}")
│   │                   raise
│   │               except Exception as e:
│   │                   logger.error(f"Unexpected error when fetching repo content: {str(e)}")
│   │                   raise
│   │               return content
│   │           
│   │           def get_pr_diff(pull_request: github.PullRequest.PullRequest) -> str:
│   │               """Get the diff of the pull request, excluding specified folders and files."""
│   │               try:
│   │                   comparison = pull_request.base.repo.compare(
│   │                       pull_request.base.sha, pull_request.head.sha
│   │                   )
│   │                   
│   │                   diff = ""
│   │                   for file in comparison.files:
│   │                       path_parts = file.filename.split('/')
│   │                       
│   │                       if (any(folder in EXCLUDE_FOLDERS for folder in path_parts) or
│   │                           path_parts[-1] in EXCLUDE_FILES):
│   │                           continue
│   │                       
│   │                       diff += f"File: {file.filename}\n"
│   │                       diff += f"Status: {file.status}\n"
│   │                       diff += f"Changes: +{file.additions} -{file.deletions}\n"
│   │                       if file.patch:
│   │                           diff += f"Patch:\n{file.patch}\n"
│   │                       diff += "\n"
│   │                   
│   │                   return diff
│   │               except github.GithubException as e:
│   │                   logger.error(f"GitHub API error when fetching PR diff: {str(e)}")
│   │                   raise
│   │               except Exception as e:
│   │                   logger.error(f"Unexpected error when fetching PR diff: {str(e)}")
│   │                   raise
│   │           
│   │           def sanitize_input(text: Optional[str]) -> str:
│   │               """Sanitize input to prevent potential injection issues."""
│   │               if text is None:
│   │                   return ""
│   │               return html.escape(text)
│   │           
│   │           def post_review(pull_request: github.PullRequest.PullRequest, review: str) -> None:
│   │               """Post the review as a comment on the pull request."""
│   │               try:
│   │                   pull_request.create_issue_comment(f"AI Code Review:\n\n{review}")
│   │               except github.GithubException as e:
│   │                   logger.error(f"GitHub API error when posting review: {str(e)}")
│   │               except Exception as e:
│   │                   logger.error(f"Unexpected error when posting review: {str(e)}")
│   │           
│   │           def count_tokens(text: str) -> int:
│   │               """Count the number of tokens in the given text."""
│   │               encoding = tiktoken.encoding_for_model(OPENAI_MODEL)
│   │               return len(encoding.encode(text))
│   │           
│   │           def split_codebase(repo_content: str) -> List[str]:
│   │               """Split the codebase into chunks, respecting the larger context window."""
│   │               encoding = tiktoken.encoding_for_model(OPENAI_MODEL)
│   │               total_tokens = len(encoding.encode(repo_content))
│   │           
│   │               if total_tokens <= MAX_CHUNK_SIZE:
│   │                   logger.info("Entire codebase fits within one chunk")
│   │                   return [repo_content]
│   │           
│   │               chunks = []
│   │               current_chunk = ""
│   │               current_chunk_tokens = 0
│   │           
│   │               for line in repo_content.split('\n'):
│   │                   line_tokens = len(encoding.encode(line))
│   │                   if current_chunk_tokens + line_tokens > MAX_CHUNK_SIZE and current_chunk:
│   │                       chunks.append(current_chunk)
│   │                       current_chunk = ""
│   │                       current_chunk_tokens = 0
│   │                   current_chunk += line + '\n'
│   │                   current_chunk_tokens += line_tokens
│   │           
│   │               if current_chunk:
│   │                   chunks.append(current_chunk)
│   │           
│   │               logger.info(f"Split codebase into {len(chunks)} chunks")
│   │               return chunks
│   └── workflows
│       ├── ai-code-review.yml
│       │   Content:
│       │       name: AI Code Review
│       │       
│       │       on:
│       │         pull_request:
│       │           types: [ready_for_review]
│       │       
│       │       jobs:
│       │         review:
│       │           runs-on: ubuntu-latest
│       │           steps:
│       │           - uses: actions/checkout@v2
│       │             with:
│       │               fetch-depth: 0
│       │       
│       │           - name: Set up Python
│       │             uses: actions/setup-python@v2
│       │             with:
│       │               python-version: '3.10'
│       │       
│       │           - name: Install dependencies
│       │             run: |
│       │               python -m pip install --upgrade pip
│       │               pip install openai PyGithub tiktoken
│       │       
│       │           - name: Run AI Code Review
│       │             env:
│       │               GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
│       │               OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
│       │             id: ai_review
│       │             run: |
│       │               output=$(python .github/scripts/ai_code_review.py)
│       │               echo "::set-output name=merge_decision::$(echo "$output" | grep MERGE_DECISION | cut -d'=' -f2)"
│       │       
│       │           - name: Set PR status
│       │             uses: actions/github-script@v6
│       │             env:
│       │               MERGE_DECISION: ${{ steps.ai_review.outputs.merge_decision }}
│       │             with:
│       │               github-token: ${{secrets.GITHUB_TOKEN}}
│       │               script: |
│       │                 const mergeDecision = process.env.MERGE_DECISION.trim().toLowerCase();
│       │                 console.log(`Merge decision: ${mergeDecision}`);
│       │                 
│       │                 let state, description;
│       │                 if (mergeDecision === 'success') {
│       │                   state = 'success';
│       │                   description = 'AI review passed';
│       │                 } else {
│       │                   state = 'failure';
│       │                   description = 'AI review failed';
│       │                 }
│       │                 
│       │                 github.rest.repos.createCommitStatus({
│       │                   owner: context.repo.owner,
│       │                   repo: context.repo.repo,
│       │                   sha: context.sha,
│       │                   state: state,
│       │                   description: description,
│       │                   context: 'AI Code Review'
│       │                 });
│       │                 
│       │                 console.log(`Set PR status to: ${state}`);
│       │       
│       │           - name: Comment PR on failure
│       │             uses: actions/github-script@v6
│       │             if: failure()
│       │             with:
│       │               github-token: ${{secrets.GITHUB_TOKEN}}
│       │               script: |
│       │                 github.rest.issues.createComment({
│       │                   issue_number: context.issue.number,
│       │                   owner: context.repo.owner,
│       │                   repo: context.repo.repo,
│       │                   body: 'AI Code Review failed. Please check the workflow logs for details.'
│       │                 })
│       ├── backend-ci-cd.yml
│       │   Content:
│       │       name: Backend CI/CD
│       │       
│       │       on:
│       │         push:
│       │           branches:
│       │             - main
│       │           paths:
│       │             - 'packages/backend/**'
│       │             - '.github/workflows/backend*.yml'
│       │         pull_request:
│       │           paths:
│       │             - 'packages/backend/**'
│       │             - '.github/workflows/backend*.yml'
│       │       
│       │       jobs:
│       │         build-and-push:
│       │           runs-on: ubuntu-latest
│       │           
│       │           steps:
│       │           - uses: actions/checkout@v2
│       │           
│       │           - name: Set up Docker Buildx
│       │             uses: docker/setup-buildx-action@v1
│       │           
│       │           - name: Login to DockerHub
│       │             uses: docker/login-action@v1
│       │             with:
│       │               username: ${{ secrets.DOCKERHUB_USERNAME }}
│       │               password: ${{ secrets.DOCKERHUB_TOKEN }}
│       │           
│       │           - name: Build and push
│       │             uses: docker/build-push-action@v2
│       │             with:
│       │               context: ./packages/backend
│       │               push: true
│       │               tags: ${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-backend:${{ github.sha }}
│       │       
│       │         deploy:
│       │           needs: [build-and-push]
│       │           runs-on: ubuntu-latest
│       │           
│       │           steps:
│       │           - uses: actions/checkout@v2
│       │           
│       │           - name: Set up kubectl
│       │             uses: azure/setup-kubectl@v1
│       │           
│       │           - name: Install kustomize
│       │             run: |
│       │               curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
│       │               sudo mv kustomize /usr/local/bin/
│       │       
│       │           - name: Set up kubeconfig
│       │             run: |
│       │               mkdir -p $HOME/.kube
│       │               echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
│       │               chmod 600 $HOME/.kube/config
│       │       
│       │           - name: Install yq
│       │             run: |
│       │               sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64
│       │               sudo chmod +x /usr/local/bin/yq
│       │       
│       │           - name: Verify kubectl configuration
│       │             run: kubectl cluster-info
│       │       
│       │           - name: Set deployment namespace and ports
│       │             run: |
│       │               if [[ "${{ github.event_name }}" == "pull_request" ]]; then
│       │                 echo "DEPLOY_NAMESPACE=test" >> $GITHUB_ENV
│       │               else
│       │                 echo "DEPLOY_NAMESPACE=default" >> $GITHUB_ENV
│       │               fi
│       │       
│       │           - name: Cleanup before deployment
│       │             uses: actions/github-script@v6
│       │             with:
│       │               script: |
│       │                 const script = require('./.github/scripts/cleanup-cluster.js')
│       │                 await script({github, context, core, exec})
│       │       
│       │           - name: Create namespace if not exists
│       │             run: |
│       │               kubectl create namespace ${{ env.DEPLOY_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
│       │       
│       │           - name: Create or update JWT secret
│       │             run: |
│       │               kubectl create secret generic jwt-secret \
│       │                 --namespace ${{ env.DEPLOY_NAMESPACE }} \
│       │                 --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
│       │                 --dry-run=client -o yaml | kubectl apply -f -
│       │       
│       │           - name: Create Server TLS Secret
│       │             run: |
│       │               if ! kubectl get secret tls-secret --namespace=${{ env.DEPLOY_NAMESPACE }} >/dev/null 2>&1; then
│       │                 kubectl create secret tls tls-secret \
│       │                   --cert=<(echo "${{ secrets.SSL_CERT }}") \
│       │                   --key=<(echo "${{ secrets.SSL_KEY }}") \
│       │                   --namespace=${{ env.DEPLOY_NAMESPACE }};
│       │               else
│       │                 echo "Secret tls-secret already exists, skipping creation.";
│       │               fi
│       │       
│       │           - name: Create PostgreSQL Secret
│       │             run: |
│       │               kubectl create secret generic postgres-secret \
│       │                 --namespace=${{ env.DEPLOY_NAMESPACE }} \
│       │                 --from-literal=POSTGRES_DB=linguaquiz \
│       │                 --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
│       │                 --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
│       │                 --dry-run=client -o yaml | kubectl apply -f -
│       │       
│       │           - name: Wait for PostgreSQL Secret
│       │             run: |
│       │               timeout 30s bash -c 'while ! kubectl get secret postgres-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for PostgreSQL secret..."; sleep 2; done' || (echo "Timed out waiting for PostgreSQL secret" && exit 1)
│       │             shell: bash
│       │       
│       │           - name: Wait for JWT Secret
│       │             run: |
│       │               timeout 30s bash -c 'while ! kubectl get secret jwt-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for JWT secret..."; sleep 2; done' || (echo "Timed out waiting for JWT secret" && exit 1)
│       │             shell: bash
│       │       
│       │           - name: Update manifests
│       │             run: |
│       │               cd packages/backend/k8s
│       │               yq e '.images[0].newName = "${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-backend"' -i kustomization.yaml
│       │               yq e '.images[0].newTag = "${{ github.sha }}"' -i kustomization.yaml
│       │               yq e '.metadata.namespace = "${{ env.DEPLOY_NAMESPACE }}"' -i deployment.yaml
│       │               yq e '.metadata.namespace = "${{ env.DEPLOY_NAMESPACE }}"' -i postgres-deployment.yaml
│       │       
│       │           - name: Deploy to Kubernetes
│       │             run: |
│       │               cd packages/backend/k8s
│       │               kustomize build | kubectl apply -f -
│       │       
│       │           - name: Wait for postgres deployment to be ready
│       │             run: |
│       │               kubectl rollout status deployment/postgres -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s
│       │       
│       │           - name: Wait for app deployment to be ready
│       │             run: |
│       │               kubectl rollout status deployment/lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s
│       │       
│       │           - name: Run Database Migrations
│       │             run: |
│       │               BACKEND_POD=$(kubectl get pods -l app=lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.items[0].metadata.name}")
│       │               kubectl exec $BACKEND_POD -n ${{ env.DEPLOY_NAMESPACE }} -- \
│       │                 env DB_HOST=postgres \
│       │                     DB_PORT=5432 \
│       │                     POSTGRES_DB=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_DB}" | base64 --decode) \
│       │                     POSTGRES_USER=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_USER}" | base64 --decode) \
│       │                     POSTGRES_PASSWORD=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_PASSWORD}" | base64 --decode) \
│       │                 npm run migrate
│       │       
│       │           - name: Cleanup on failure
│       │             if: failure()
│       │             uses: actions/github-script@v6
│       │             with:
│       │               script: |
│       │                 const script = require('./.github/scripts/cleanup-cluster.js')
│       │                 await script({github, context, core, exec})
│       │         test:
│       │           needs: [build-and-push, deploy]
│       │           runs-on: ubuntu-latest
│       │           steps:
│       │           - uses: actions/checkout@v2
│       │           
│       │           - name: Use Node.js
│       │             uses: actions/setup-node@v2
│       │             with:
│       │               node-version: '16'
│       │           - name: Install dependencies
│       │             run: |
│       │               cd packages/backend
│       │               npm ci
│       │       
│       │           - name: Determine API URL and Run tests
│       │             run: |
│       │               if [[ "${{ github.event_name }}" == "pull_request" ]]; then
│       │                 API_URL="https://test-api-lingua-quiz.nikolay-eremeev.com"
│       │               else
│       │                 API_URL="https://api-lingua-quiz.nikolay-eremeev.com"
│       │               fi
│       │               
│       │               cd packages/backend
│       │               npm install --save-dev @babel/core @babel/preset-env babel-jest
│       │               API_URL=$API_URL npm test
│       │         
│       │           - name: Upload test results
│       │             uses: actions/upload-artifact@v2
│       │             if: failure()
│       │             with:
│       │               name: test-results
│       │               path: packages/backend/test-results
│       ├── code-quality-check.yml
│       │   Content:
│       │       name: Code Quality Check
│       │       
│       │       on:
│       │         pull_request:
│       │         push:
│       │           branches:
│       │             - main
│       │       
│       │       jobs:
│       │         depcheck:
│       │           name: Depcheck
│       │           runs-on: ubuntu-latest
│       │       
│       │           steps:
│       │           - name: Checkout code
│       │             uses: actions/checkout@v2
│       │             with:
│       │               fetch-depth: 0
│       │       
│       │           - name: Set up Node.js
│       │             uses: actions/setup-node@v2
│       │             with:
│       │               node-version: '18'
│       │       
│       │           - name: Install dependencies
│       │             run: npm install
│       │       
│       │           - name: Run depcheck
│       │             run: npm run depcheck
│       │       
│       │         eslint:
│       │           name: ESLint
│       │           runs-on: ubuntu-latest
│       │       
│       │           steps:
│       │           - name: Checkout code
│       │             uses: actions/checkout@v2
│       │             with:
│       │               fetch-depth: 0
│       │       
│       │           - name: Set up Node.js
│       │             uses: actions/setup-node@v2
│       │             with:
│       │               node-version: '18'
│       │       
│       │           - name: Install dependencies
│       │             run: npm install
│       │       
│       │           - name: Run ESLint
│       │             run: npm run lint
│       │       
│       │         codeql:
│       │           name: CodeQL
│       │           runs-on: ubuntu-latest
│       │           strategy:
│       │             matrix:
│       │               language: [ 'javascript' ]
│       │           steps:
│       │           - name: Checkout repository
│       │             uses: actions/checkout@v2
│       │           - name: Initialize CodeQL
│       │             uses: github/codeql-action/init@v2
│       │             with:
│       │               languages: ${{ matrix.language }}
│       │           - name: Autobuild
│       │             uses: github/codeql-action/autobuild@v2
│       │           - name: Perform CodeQL Analysis
│       │             uses: github/codeql-action/analyze@v2
│       └── frontend-ci-cd.yml
│           Content:
│               name: Frontend CI/CD
│               
│               on:
│                 push:
│                   branches:
│                     - main
│                   paths:
│                     - 'packages/frontend/**'
│                     - '.github/workflows/frontend*.yml'
│                 pull_request:
│                   paths:
│                     - 'packages/frontend/**'
│                     - '.github/workflows/frontend*.yml'
│               
│               jobs:
│                 build-and-push:
│                   runs-on: ubuntu-latest
│                   
│                   steps:
│                   - name: Checkout code
│                     uses: actions/checkout@v3
│                     with:
│                       submodules: recursive
│                       fetch-depth: 0 
│               
│                   - name: Set up Docker Buildx
│                     uses: docker/setup-buildx-action@v2
│               
│                   - name: Login to Docker Hub
│                     uses: docker/login-action@v2
│                     with:
│                       username: ${{ secrets.DOCKERHUB_USERNAME }}
│                       password: ${{ secrets.DOCKERHUB_TOKEN }}
│               
│                   - name: Set Docker tags
│                     id: set_tags
│                     run: |
│                       if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
│                         echo "TAGS=${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:latest,${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:${{ github.sha }}" >> $GITHUB_OUTPUT
│                       else
│                         echo "TAGS=${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:dev-latest,${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:dev-${{ github.sha }}" >> $GITHUB_OUTPUT
│                       fi
│               
│                   - name: Set build environment
│                     run: |
│                       if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
│                         echo "BUILD_ENV=prod" >> $GITHUB_ENV
│                       else
│                         echo "BUILD_ENV=test" >> $GITHUB_ENV
│                       fi
│               
│                   - name: Build and push
│                     uses: docker/build-push-action@v4
│                     with:
│                       context: packages/frontend
│                       push: true
│                       tags: ${{ steps.set_tags.outputs.TAGS }}
│                       build-args: |
│                         BUILD_ENV=${{ env.BUILD_ENV }}
│               
│                 prepare-vps:
│                   runs-on: ubuntu-latest
│                   needs: [build-and-push]
│               
│                   steps:
│                   - name: Prepare VPS
│                     env:
│                       PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
│                       HOST: ${{ secrets.SERVER_IP }}
│                       USER: ${{ secrets.SERVER_USER }}
│                     run: |
│                       echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
│                       ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
│                         # Update package list and upgrade non-interactively
│                         sudo DEBIAN_FRONTEND=noninteractive apt-get update
│                         sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"
│               
│                         # Install essential packages
│                         sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl git
│               
│                         # Install Docker if not already installed
│                         if ! command -v docker &> /dev/null; then
│                           curl -fsSL https://get.docker.com -o get-docker.sh
│                           sudo sh get-docker.sh
│                           sudo usermod -aG docker $USER
│                         fi
│               
│                         # Ensure Docker service is running and enabled
│                         sudo systemctl start docker
│                         sudo systemctl enable docker
│               
│                         # Install Docker Compose if not already installed
│                         if ! command -v docker-compose &> /dev/null; then
│                           sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
│                           sudo chmod +x /usr/local/bin/docker-compose
│                         fi
│               
│                         # Set up firewall (ufw) if not already configured
│                         if ! sudo ufw status | grep -q "Status: active"; then
│                           sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw
│                           sudo ufw default deny incoming
│                           sudo ufw default allow outgoing
│                           sudo ufw allow ssh
│                           sudo ufw allow http
│                           sudo ufw allow https
│                           echo "y" | sudo ufw enable
│                         fi
│               
│                         # Print system info
│                         echo "System updated and Docker installation checked"
│                         uname -a
│                         docker --version
│                         docker-compose --version
│                         sudo ufw status
│                       '
│               
│                 deploy:
│                   runs-on: ubuntu-latest
│                   needs: [build-and-push, prepare-vps]
│                   
│                   steps:
│                   - name: Deploy to VPS
│                     env:
│                       PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
│                       HOST: ${{ secrets.SERVER_IP }}
│                       USER: ${{ secrets.SERVER_USER }}
│                       SSL_CERT: ${{ secrets.SSL_CERT }}
│                       SSL_KEY: ${{ secrets.SSL_KEY }}
│                       HTTPS_PORT: ${{ github.event_name == 'pull_request' && '8443' || '443' }}
│                       DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
│                     run: |
│                       echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
│                       
│                       # Create temporary files for SSL cert and key
│                       echo "$SSL_CERT" > cert.pem
│                       echo "$SSL_KEY" > key.pem
│                       
│                       # Transfer SSL certificates
│                       scp -i private_key -o StrictHostKeyChecking=no cert.pem ${USER}@${HOST}:/tmp/cert.pem
│                       scp -i private_key -o StrictHostKeyChecking=no key.pem ${USER}@${HOST}:/tmp/key.pem
│                       
│                       # Remove temporary files
│                       rm cert.pem key.pem
│                       
│                       ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
│                         # Move SSL certificates to appropriate location
│                         sudo mkdir -p /etc/nginx/ssl
│                         sudo mv /tmp/cert.pem /etc/nginx/ssl/cert.pem
│                         sudo mv /tmp/key.pem /etc/nginx/ssl/key.pem
│                         sudo chmod 600 /etc/nginx/ssl/cert.pem /etc/nginx/ssl/key.pem
│                         
│                         HTTPS_PORT=${HTTPS_PORT}
│                         DOCKERHUB_USERNAME=${DOCKERHUB_USERNAME}
│               
│                         if [ \"\${HTTPS_PORT}\" = \"443\" ]; then
│                           IMAGE_HASH=\${DOCKERHUB_USERNAME}/lingua-quiz-frontend:latest
│                         else
│                           IMAGE_HASH=\${DOCKERHUB_USERNAME}/lingua-quiz-frontend:dev-latest
│                         fi
│               
│                         echo \"Using image: \${IMAGE_HASH}\"
│               
│                         # Pull and run Docker container with specific image hash
│                         docker pull \${IMAGE_HASH}
│                         docker stop website-container-\${HTTPS_PORT} || true
│                         docker rm website-container-\${HTTPS_PORT} || true
│                         docker run -d --name website-container-\${HTTPS_PORT} \
│                           -p \${HTTPS_PORT}:\${HTTPS_PORT} \
│                           -v /etc/nginx/ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro \
│                           -v /etc/nginx/ssl/key.pem:/etc/nginx/ssl/key.pem:ro \
│                           -e HTTPS_PORT=\${HTTPS_PORT} \
│                           \${IMAGE_HASH}
│                       "
├── .gitignore
│   Content:
│       # Dependency directories
│       node_modules/
│       
│       # Environment files
│       .env
│       
│       # Build outputs
│       dist/
│       build/
│       out/
│       
│       # Logs
│       logs/
│       *.log
│       npm-debug.log*
│       
│       # Runtime data
│       pids/
│       *.pid
│       *.seed
│       *.pid.lock
│       
│       # Directory for instrumented libs generated by jscoverage/JSCover
│       lib-cov/
│       
│       # Coverage directory used by tools like istanbul
│       coverage/
│       
│       # nyc test coverage
│       .nyc_output
│       
│       # Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
│       .grunt
│       
│       # IDE and editor folders
│       .idea/
│       *.swp
│       *.swo
│       *.sublime-workspace
│       
│       # OS generated files
│       .DS_Store
│       .DS_Store?
│       ._*
│       .Spotlight-V100
│       .Trashes
│       ehthumbs.db
│       Thumbs.db
│       
│       #amplify-do-not-edit-begin
│       amplify/\#current-cloud-backend
│       amplify/.config/local-*
│       amplify/logs
│       amplify/mock-data
│       amplify/mock-api-resources
│       amplify/backend/amplify-meta.json
│       amplify/backend/.temp
│       build/
│       dist/
│       node_modules/
│       aws-exports.js
│       awsconfiguration.json
│       amplifyconfiguration.json
│       amplifyconfiguration.dart
│       amplify-build-config.json
│       amplify-gradle-config.json
│       amplifytools.xcconfig
│       .secret-*
│       *.secret
│       **.sample
│       *.key
│       *.csr
│       *.crt
│       !ca.crt
│       *.cnf
│       *.pem
├── package.json
│   Content:
│       {
│         "name": "linguaquiz",
│         "version": "1.0.0",
│         "main": "index.js",
│         "scripts": {
│           "lint": "eslint . --fix --max-warnings=0",
│           "depcheck": "depcheck"
│         },
│         "workspaces": [
│           "packages/*"
│         ],
│         "keywords": [],
│         "author": "",
│         "license": "ISC",
│         "devDependencies": {
│           "depcheck": "^1.4.7",
│           "eslint": "^8.56.0",
│           "eslint-config-airbnb-base": "^15.0.0",
│           "eslint-config-prettier": "^9.1.0",
│           "eslint-plugin-import": "^2.29.1",
│           "eslint-plugin-mocha": "^10.4.3",
│           "eslint-plugin-prettier": "^5.1.3",
│           "prettier": "^3.3.2"
│         },
│         "description": ""
│       }
├── packages
│   ├── backend
│   │   ├── Dockerfile
│   │   │   Content:
│   │   │       FROM node:22.5.1
│   │   │       
│   │   │       WORKDIR /app
│   │   │       
│   │   │       COPY package*.json ./
│   │   │       RUN npm install
│   │   │       
│   │   │       COPY server.js .
│   │   │       COPY run-migrations.js .
│   │   │       COPY migrations ./migrations
│   │   │       
│   │   │       EXPOSE 3000
│   │   │       
│   │   │       CMD ["node", "server.js"]
│   │   ├── babel.config.js
│   │   │   Content:
│   │   │       module.exports = {
│   │   │         presets: [['@babel/preset-env', { targets: { node: 'current' } }]],
│   │   │       };
│   │   ├── jest.config.js
│   │   │   Content:
│   │   │       module.exports = {
│   │   │         transform: {
│   │   │           '^.+\\.js$': 'babel-jest',
│   │   │         },
│   │   │         transformIgnorePatterns: ['/node_modules/(?!chai)'],
│   │   │       };
│   │   ├── k8s
│   │   │   ├── deployment.yaml
│   │   │   │   Content:
│   │   │   │       apiVersion: apps/v1
│   │   │   │       kind: Deployment
│   │   │   │       metadata:
│   │   │   │         name: lingua-quiz-backend
│   │   │   │       spec:
│   │   │   │         replicas: 2
│   │   │   │         selector:
│   │   │   │           matchLabels:
│   │   │   │             app: lingua-quiz-backend
│   │   │   │         template:
│   │   │   │           metadata:
│   │   │   │             labels:
│   │   │   │               app: lingua-quiz-backend
│   │   │   │           spec:
│   │   │   │             containers:
│   │   │   │             - name: backend
│   │   │   │               image: lingua-quiz-backend
│   │   │   │               ports:
│   │   │   │               - containerPort: 3000
│   │   │   │               resources:
│   │   │   │                 limits:
│   │   │   │                   cpu: "500m"
│   │   │   │                   memory: "512Mi"
│   │   │   │                 requests:
│   │   │   │                   cpu: "250m"
│   │   │   │                   memory: "256Mi"
│   │   │   │               livenessProbe:
│   │   │   │                 httpGet:
│   │   │   │                   path: /healthz
│   │   │   │                   port: 3000
│   │   │   │                   scheme: HTTPS
│   │   │   │                 initialDelaySeconds: 30
│   │   │   │                 periodSeconds: 10
│   │   │   │                 timeoutSeconds: 5
│   │   │   │                 failureThreshold: 3
│   │   │   │               readinessProbe:
│   │   │   │                 httpGet:
│   │   │   │                   path: /healthz
│   │   │   │                   port: 3000
│   │   │   │                   scheme: HTTPS
│   │   │   │                 initialDelaySeconds: 5
│   │   │   │                 periodSeconds: 5
│   │   │   │                 timeoutSeconds: 3
│   │   │   │                 successThreshold: 1
│   │   │   │                 failureThreshold: 3
│   │   │   │               startupProbe:
│   │   │   │                 httpGet:
│   │   │   │                   path: /healthz
│   │   │   │                   port: 3000
│   │   │   │                   scheme: HTTPS
│   │   │   │                 failureThreshold: 30
│   │   │   │                 periodSeconds: 10
│   │   │   │                 timeoutSeconds: 5
│   │   │   │               env:
│   │   │   │               - name: NODE_ENV
│   │   │   │                 value: "production"
│   │   │   │               - name: DB_HOST
│   │   │   │                 value: "postgres"
│   │   │   │               - name: DB_PORT
│   │   │   │                 value: "5432"
│   │   │   │               - name: POSTGRES_DB
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_DB
│   │   │   │               - name: POSTGRES_PASSWORD
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_PASSWORD
│   │   │   │               - name: POSTGRES_USER
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_USER
│   │   │   │               - name: JWT_SECRET
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: jwt-secret
│   │   │   │                     key: JWT_SECRET
│   │   │   │               - name: SSL_KEY_PATH
│   │   │   │                 value: "/etc/tls/tls.key"
│   │   │   │               - name: SSL_CERT_PATH
│   │   │   │                 value: "/etc/tls/tls.crt"
│   │   │   │               - name: PORT
│   │   │   │                 value: "3000"
│   │   │   │               volumeMounts:
│   │   │   │               - name: tls
│   │   │   │                 mountPath: "/etc/tls"
│   │   │   │                 readOnly: true
│   │   │   │             volumes:
│   │   │   │             - name: tls
│   │   │   │               secret:
│   │   │   │                 secretName: tls-secret
│   │   │   ├── kustomization.yaml
│   │   │   │   Content:
│   │   │   │       apiVersion: kustomize.config.k8s.io/v1beta1
│   │   │   │       kind: Kustomization
│   │   │   │       
│   │   │   │       resources:
│   │   │   │         - postgres-deployment.yaml
│   │   │   │         - deployment.yaml
│   │   │   │         - service.yaml
│   │   │   │       
│   │   │   │       
│   │   │   │       images:
│   │   │   │       - name: lingua-quiz-backend
│   │   │   │         newName: IMAGE_NAME_PLACEHOLDER
│   │   │   │         newTag: latest
│   │   │   ├── postgres-deployment.yaml
│   │   │   │   Content:
│   │   │   │       apiVersion: apps/v1
│   │   │   │       kind: Deployment
│   │   │   │       metadata:
│   │   │   │         name: postgres
│   │   │   │       spec:
│   │   │   │         replicas: 1
│   │   │   │         selector:
│   │   │   │           matchLabels:
│   │   │   │             app: postgres
│   │   │   │         template:
│   │   │   │           metadata:
│   │   │   │             labels:
│   │   │   │               app: postgres
│   │   │   │           spec:
│   │   │   │             containers:
│   │   │   │             - name: postgres
│   │   │   │               image: postgres:13
│   │   │   │               ports:
│   │   │   │               - containerPort: 5432
│   │   │   │               env:
│   │   │   │               - name: POSTGRES_DB
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_DB
│   │   │   │               - name: POSTGRES_USER
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_USER
│   │   │   │               - name: POSTGRES_PASSWORD
│   │   │   │                 valueFrom:
│   │   │   │                   secretKeyRef:
│   │   │   │                     name: postgres-secret
│   │   │   │                     key: POSTGRES_PASSWORD
│   │   │   │               volumeMounts:
│   │   │   │               - name: postgres-storage
│   │   │   │                 mountPath: /var/lib/postgresql/data
│   │   │   │                 subPath: postgres  # Uses a subdirectory to prevent overwriting the entire volume
│   │   │   │             volumes:
│   │   │   │             - name: postgres-storage
│   │   │   │               emptyDir: {}
│   │   │   │       ---
│   │   │   │       apiVersion: v1
│   │   │   │       kind: Service
│   │   │   │       metadata:
│   │   │   │         name: postgres
│   │   │   │       spec:
│   │   │   │         selector:
│   │   │   │           app: postgres
│   │   │   │         ports:
│   │   │   │           - protocol: TCP
│   │   │   │             port: 5432
│   │   │   │             targetPort: 5432
│   │   │   └── service.yaml
│   │   │       Content:
│   │   │           apiVersion: v1
│   │   │           kind: Service
│   │   │           metadata:
│   │   │             name: lingua-quiz-backend-service
│   │   │           spec:
│   │   │             selector:
│   │   │               app: lingua-quiz-backend
│   │   │             ports:
│   │   │               - protocol: TCP
│   │   │                 port: 443
│   │   │                 targetPort: 3000  # This should match the PORT env variable in your deployment
│   │   │             type: LoadBalancer
│   │   ├── migrations
│   │   │   └── 001_create_users_table.sql
│   │   │       Content:
│   │   │           -- packages/backend/migrations/001_create_users_table.sql
│   │   │           
│   │   │           CREATE TABLE IF NOT EXISTS users (
│   │   │             id SERIAL PRIMARY KEY,
│   │   │             email VARCHAR(255) UNIQUE NOT NULL,
│   │   │             password VARCHAR(255) NOT NULL
│   │   │           );
│   │   ├── package.json
│   │   │   Content:
│   │   │       {
│   │   │         "name": "@linguaquiz/backend",
│   │   │         "version": "1.0.0",
│   │   │         "main": "index.js",
│   │   │         "scripts": {
│   │   │           "start": "node server.js",
│   │   │           "migrate": "node run-migrations.js",
│   │   │           "test": "jest --detectOpenHandles"
│   │   │         },
│   │   │         "keywords": [],
│   │   │         "author": "",
│   │   │         "license": "ISC",
│   │   │         "description": "",
│   │   │         "dependencies": {
│   │   │           "axios": "^1.7.2",
│   │   │           "bcrypt": "^5.1.1",
│   │   │           "bcryptjs": "^2.4.3",
│   │   │           "chai": "^5.1.1",
│   │   │           "cors": "^2.8.5",
│   │   │           "dotenv": "^16.4.5",
│   │   │           "express": "^4.19.2",
│   │   │           "express-rate-limit": "^7.3.1",
│   │   │           "express-validator": "^7.1.0",
│   │   │           "jest": "^29.7.0",
│   │   │           "jsonwebtoken": "^9.0.2",
│   │   │           "mongoose": "^8.4.5",
│   │   │           "pg": "^8.12.0",
│   │   │           "winston": "^3.13.1"
│   │   │         },
│   │   │         "devDependencies": {
│   │   │           "@babel/core": "^7.24.9",
│   │   │           "@babel/preset-env": "^7.25.0",
│   │   │           "babel-jest": "^29.7.0"
│   │   │         }
│   │   │       }
│   │   ├── run-migrations.js
│   │   │   Content:
│   │   │       const fs = require('fs');
│   │   │       const path = require('path');
│   │   │       const { Pool } = require('pg');
│   │   │       const winston = require('winston');
│   │   │       
│   │   │       const logger = winston.createLogger({
│   │   │         level: 'info',
│   │   │         format: winston.format.combine(
│   │   │           winston.format.timestamp(),
│   │   │           winston.format.printf(({ timestamp, level, message }) => {
│   │   │             return `${timestamp} [${level.toUpperCase()}]: ${message}`;
│   │   │           })
│   │   │         ),
│   │   │         transports: [
│   │   │           new winston.transports.Console(),
│   │   │           new winston.transports.File({ filename: 'migration.log' }),
│   │   │         ],
│   │   │       });
│   │   │       
│   │   │       const pool = new Pool({
│   │   │         host: process.env.DB_HOST,
│   │   │         port: process.env.DB_PORT,
│   │   │         database: process.env.POSTGRES_DB,
│   │   │         user: process.env.POSTGRES_USER,
│   │   │         password: process.env.POSTGRES_PASSWORD,
│   │   │       });
│   │   │       
│   │   │       async function runMigrations() {
│   │   │         logger.info('Starting migration process...');
│   │   │         logger.info(`Migration directory: ${path.join(__dirname, 'migrations')}`);
│   │   │       
│   │   │         const migrationFiles = fs
│   │   │           .readdirSync(path.join(__dirname, 'migrations'))
│   │   │           .sort((a, b) => a.localeCompare(b));
│   │   │       
│   │   │         logger.info(`Found migration files: ${migrationFiles.join(', ')}`);
│   │   │       
│   │   │         const runMigration = async (file) => {
│   │   │           if (path.extname(file) === '.sql') {
│   │   │             const filePath = path.join(__dirname, 'migrations', file);
│   │   │             logger.info(`Reading file: ${filePath}`);
│   │   │       
│   │   │             const sql = fs.readFileSync(filePath, 'utf8');
│   │   │             logger.info(`Migration content for ${file}: ${sql.substring(0, 100)}...`);
│   │   │       
│   │   │             logger.info(`Running migration: ${file}`);
│   │   │             try {
│   │   │               await pool.query(sql);
│   │   │               logger.info(`Completed migration: ${file}`);
│   │   │             } catch (error) {
│   │   │               logger.error(`Error in migration ${file}:`, error);
│   │   │               throw error;
│   │   │             }
│   │   │           } else {
│   │   │             logger.info(`Skipping non-SQL file: ${file}`);
│   │   │           }
│   │   │         };
│   │   │       
│   │   │         try {
│   │   │           await Promise.all(migrationFiles.map(runMigration));
│   │   │           logger.info('All migrations completed successfully');
│   │   │         } catch (error) {
│   │   │           logger.error('Error during migrations:', error);
│   │   │           throw error;
│   │   │         } finally {
│   │   │           logger.info('Closing database connection...');
│   │   │           await pool.end();
│   │   │           logger.info('Database connection closed');
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       runMigrations().catch((error) => {
│   │   │         logger.error('Migration process failed:', error);
│   │   │         process.exit(1);
│   │   │       });
│   │   ├── server.js
│   │   │   Content:
│   │   │       const express = require('express');
│   │   │       const { Pool } = require('pg');
│   │   │       const bcrypt = require('bcrypt');
│   │   │       const jwt = require('jsonwebtoken');
│   │   │       const dotenv = require('dotenv');
│   │   │       const rateLimit = require('express-rate-limit');
│   │   │       const { body, validationResult } = require('express-validator');
│   │   │       const winston = require('winston');
│   │   │       const https = require('https');
│   │   │       const fs = require('fs');
│   │   │       const cors = require('cors');
│   │   │       
│   │   │       dotenv.config();
│   │   │       
│   │   │       const logger = winston.createLogger({
│   │   │         level: 'info',
│   │   │         format: winston.format.combine(winston.format.timestamp(), winston.format.json()),
│   │   │         transports: [
│   │   │           new winston.transports.Console(),
│   │   │           new winston.transports.File({ filename: 'error.log', level: 'error' }),
│   │   │           new winston.transports.File({ filename: 'combined.log' }),
│   │   │         ],
│   │   │       });
│   │   │       
│   │   │       const app = express();
│   │   │       app.use(express.json());
│   │   │       app.use(cors());
│   │   │       
│   │   │       const pool = new Pool({
│   │   │         host: process.env.DB_HOST,
│   │   │         port: process.env.DB_PORT,
│   │   │         database: process.env.POSTGRES_DB,
│   │   │         user: process.env.POSTGRES_USER,
│   │   │         password: process.env.POSTGRES_PASSWORD,
│   │   │       });
│   │   │       
│   │   │       pool.on('connect', () => {
│   │   │         logger.info('Connected to the database');
│   │   │       });
│   │   │       
│   │   │       pool.on('error', (err) => {
│   │   │         logger.error('Database error', { error: err });
│   │   │       });
│   │   │       
│   │   │       async function userExists(email) {
│   │   │         const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
│   │   │         return result.rows.length > 0;
│   │   │       }
│   │   │       
│   │   │       function authenticateToken(req, res, next) {
│   │   │         const authHeader = req.headers.authorization;
│   │   │         const token = authHeader && authHeader.split(' ')[1];
│   │   │       
│   │   │         if (token == null) {
│   │   │           logger.warn('Authentication failed: No token provided');
│   │   │           res.sendStatus(401);
│   │   │           return;
│   │   │         }
│   │   │       
│   │   │         jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
│   │   │           if (err) {
│   │   │             logger.warn('Authentication failed: Invalid token', { error: err });
│   │   │             res.sendStatus(403);
│   │   │             return;
│   │   │           }
│   │   │           req.userId = user.userId;
│   │   │           next();
│   │   │         });
│   │   │       }
│   │   │       
│   │   │       const limiter = rateLimit({
│   │   │         windowMs: 15 * 60 * 1000,
│   │   │         max: 100,
│   │   │         skip: (req) => req.path === '/healthz',
│   │   │       });
│   │   │       
│   │   │       app.use(limiter);
│   │   │       
│   │   │       app.get('/healthz', async (req, res) => {
│   │   │         try {
│   │   │           await pool.query('SELECT 1'); // Basic DB check
│   │   │           res.status(200).json({ status: 'ok' });
│   │   │         } catch (error) {
│   │   │           logger.error('Health check failed', { error });
│   │   │           res.status(500).json({ status: 'error', message: 'Database connection failed' });
│   │   │         }
│   │   │       });
│   │   │       
│   │   │       app.post(
│   │   │         '/register',
│   │   │         body('email').isEmail(),
│   │   │         body('password').isLength({ min: 6 }),
│   │   │         async (req, res) => {
│   │   │           const errors = validationResult(req);
│   │   │           if (!errors.isEmpty()) {
│   │   │             logger.warn('Registration validation failed', { errors: errors.array() });
│   │   │             return res.status(400).json({ errors: errors.array() });
│   │   │           }
│   │   │       
│   │   │           const { email, password } = req.body;
│   │   │       
│   │   │           try {
│   │   │             if (await userExists(email)) {
│   │   │               logger.warn('Registration failed: User already exists', { email });
│   │   │               return res.status(400).json({ message: 'User already exists' });
│   │   │             }
│   │   │       
│   │   │             const hashedPassword = await bcrypt.hash(
│   │   │               password,
│   │   │               Number(process.env.BCRYPT_SALT_ROUNDS) || 10
│   │   │             );
│   │   │       
│   │   │             await pool.query('INSERT INTO users (email, password) VALUES ($1, $2)', [
│   │   │               email,
│   │   │               hashedPassword,
│   │   │             ]);
│   │   │       
│   │   │             logger.info('User registered successfully', { email });
│   │   │             return res.status(201).json({ message: 'User registered successfully' });
│   │   │           } catch (error) {
│   │   │             logger.error('Registration error', { error });
│   │   │             return res.status(500).json({ message: 'Server error' });
│   │   │           }
│   │   │         }
│   │   │       );
│   │   │       
│   │   │       app.post(
│   │   │         '/login',
│   │   │         body('email').isEmail(),
│   │   │         body('password').isLength({ min: 6 }),
│   │   │         async (req, res) => {
│   │   │           const errors = validationResult(req);
│   │   │           if (!errors.isEmpty()) {
│   │   │             logger.warn('Login validation failed', { errors: errors.array() });
│   │   │             return res.status(400).json({ errors: errors.array() });
│   │   │           }
│   │   │       
│   │   │           const { email, password } = req.body;
│   │   │       
│   │   │           try {
│   │   │             const result = await pool.query('SELECT * FROM users WHERE email = $1', [email]);
│   │   │             if (result.rows.length === 0) {
│   │   │               logger.warn('Login failed: User not found', { email });
│   │   │               return res.status(401).json({ message: 'Invalid credentials' });
│   │   │             }
│   │   │       
│   │   │             const user = result.rows[0];
│   │   │       
│   │   │             const validPassword = await bcrypt.compare(password, user.password);
│   │   │             if (!validPassword) {
│   │   │               logger.warn('Login failed: Invalid password', { email });
│   │   │               return res.status(401).json({ message: 'Invalid credentials' });
│   │   │             }
│   │   │       
│   │   │             const token = jwt.sign({ userId: user.id }, process.env.JWT_SECRET, {
│   │   │               expiresIn: process.env.JWT_EXPIRES_IN || '1h',
│   │   │             });
│   │   │       
│   │   │             logger.info('User logged in successfully', { email });
│   │   │             return res.json({ token });
│   │   │           } catch (error) {
│   │   │             logger.error('Login error', { error });
│   │   │             return res.status(500).json({ message: 'Server error' });
│   │   │           }
│   │   │         }
│   │   │       );
│   │   │       
│   │   │       app.delete('/delete-account', authenticateToken, async (req, res) => {
│   │   │         const { userId } = req;
│   │   │       
│   │   │         try {
│   │   │           const result = await pool.query('DELETE FROM users WHERE id = $1 RETURNING email', [userId]);
│   │   │       
│   │   │           if (result.rows.length === 0) {
│   │   │             logger.warn('Account deletion failed: User not found', { userId });
│   │   │             return res.status(404).json({ message: 'User not found' });
│   │   │           }
│   │   │       
│   │   │           const deletedUserEmail = result.rows[0].email;
│   │   │           logger.info('User account deleted successfully', { userId, email: deletedUserEmail });
│   │   │       
│   │   │           return res.status(200).json({ message: 'Account deleted successfully' });
│   │   │         } catch (error) {
│   │   │           logger.error('Account deletion error', { userId, error });
│   │   │           return res.status(500).json({ message: 'Server error' });
│   │   │         }
│   │   │       });
│   │   │       
│   │   │       function getSSLOptions() {
│   │   │         const keyPath = process.env.SSL_KEY_PATH || '/etc/tls/tls.key';
│   │   │         const certPath = process.env.SSL_CERT_PATH || '/etc/tls/tls.crt';
│   │   │       
│   │   │         if (!fs.existsSync(keyPath)) {
│   │   │           throw new Error(`SSL key file not found: ${keyPath}`);
│   │   │         }
│   │   │         if (!fs.existsSync(certPath)) {
│   │   │           throw new Error(`SSL certificate file not found: ${certPath}`);
│   │   │         }
│   │   │       
│   │   │         try {
│   │   │           return {
│   │   │             key: fs.readFileSync(keyPath),
│   │   │             cert: fs.readFileSync(certPath),
│   │   │           };
│   │   │         } catch (readError) {
│   │   │           throw new Error(`Failed to read SSL files: ${readError.message}`);
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       function startServer() {
│   │   │         const PORT = process.env.PORT || 3000;
│   │   │       
│   │   │         try {
│   │   │           const sslOptions = getSSLOptions();
│   │   │           const server = https.createServer(sslOptions, app);
│   │   │       
│   │   │           server.listen(PORT, () => {
│   │   │             logger.info(`HTTPS Server running on port ${PORT}`);
│   │   │           });
│   │   │       
│   │   │           server.on('error', (serverError) => {
│   │   │             logger.error('Server error:', serverError);
│   │   │             process.exit(1);
│   │   │           });
│   │   │         } catch (sslError) {
│   │   │           logger.error('Failed to start HTTPS server:', sslError);
│   │   │           if (process.env.NODE_ENV === 'production') {
│   │   │             process.exit(1);
│   │   │           } else {
│   │   │             logger.warn('Falling back to HTTP server in non-production environment');
│   │   │             const httpServer = app.listen(PORT, () => {
│   │   │               logger.info(`HTTP Server running on port ${PORT}`);
│   │   │             });
│   │   │       
│   │   │             httpServer.on('error', (httpError) => {
│   │   │               logger.error('HTTP Server error:', httpError);
│   │   │               process.exit(1);
│   │   │             });
│   │   │           }
│   │   │         }
│   │   │       }
│   │   │       
│   │   │       startServer();
│   │   │       
│   │   │       process.on('unhandledRejection', (reason, promise) => {
│   │   │         logger.error('Unhandled Rejection at:', promise, 'reason:', reason);
│   │   │       });
│   │   │       
│   │   │       process.on('uncaughtException', (error) => {
│   │   │         logger.error('Uncaught Exception:', error);
│   │   │         process.exit(1);
│   │   │       });
│   │   └── tests
│   │       └── api.test.js
│   │           Content:
│   │               const axios = require('axios');
│   │               const https = require('https');
│   │               const { expect } = require('chai');
│   │               
│   │               const API_URL = process.env.API_URL || 'https://localhost:3000';
│   │               
│   │               const httpsAgent = new https.Agent({});
│   │               
│   │               const axiosInstance = axios.create({
│   │                 httpsAgent,
│   │               });
│   │               
│   │               describe('Backend API Tests', () => {
│   │                 describe('Health Check', () => {
│   │                   it('should return OK status', async () => {
│   │                     const response = await axiosInstance.get(`${API_URL}/healthz`);
│   │                     expect(response.status).to.equal(200);
│   │                     expect(response.data.status).to.equal('ok');
│   │                   });
│   │                 });
│   │               
│   │                 describe('Registration and Login', () => {
│   │                   const testUser = {
│   │                     email: `test${Date.now()}@example.com`,
│   │                     password: 'testPassword123!',
│   │                   };
│   │               
│   │                   it('should register a new user', async () => {
│   │                     const response = await axiosInstance.post(`${API_URL}/register`, testUser);
│   │                     expect(response.status).to.equal(201);
│   │                     expect(response.data.message).to.equal('User registered successfully');
│   │                   });
│   │               
│   │                   it('should not register an existing user', async () => {
│   │                     try {
│   │                       await axiosInstance.post(`${API_URL}/register`, testUser);
│   │                     } catch (error) {
│   │                       expect(error.response.status).to.equal(400);
│   │                       expect(error.response.data.message).to.equal('User already exists');
│   │                     }
│   │                   });
│   │               
│   │                   it('should login with correct credentials', async () => {
│   │                     const response = await axiosInstance.post(`${API_URL}/login`, testUser);
│   │                     expect(response.status).to.equal(200);
│   │                     expect(response.data).to.have.property('token');
│   │                   });
│   │               
│   │                   it('should not login with incorrect credentials', async () => {
│   │                     try {
│   │                       await axiosInstance.post(`${API_URL}/login`, { ...testUser, password: 'wrongPassword' });
│   │                     } catch (error) {
│   │                       expect(error.response.status).to.equal(401);
│   │                       expect(error.response.data.message).to.equal('Invalid credentials');
│   │                     }
│   │                   });
│   │                 });
│   │               
│   │                 describe('Rate Limiting', () => {
│   │                   it('should enforce rate limit', async () => {
│   │                     const requests = Array(105)
│   │                       .fill()
│   │                       .map(() => axiosInstance.get(`${API_URL}/healthz`));
│   │                     try {
│   │                       await Promise.all(requests);
│   │                     } catch (error) {
│   │                       expect(error.response.status).to.equal(429);
│   │                     }
│   │                   });
│   │                 });
│   │               });
│   ├── frontend
│   │   ├── Dockerfile
│   │   │   Content:
│   │   │       FROM node:alpine as builder
│   │   │       
│   │   │       RUN apk add --no-cache ca-certificates
│   │   │       
│   │   │       WORKDIR /site
│   │   │       COPY package*.json ./
│   │   │       RUN npm install
│   │   │       
│   │   │       COPY . .
│   │   │       
│   │   │       ARG BUILD_ENV
│   │   │       RUN if [ "$BUILD_ENV" = "prod" ]; then \
│   │   │               npm run build:prod; \
│   │   │           else \
│   │   │               npm run build:dev; \
│   │   │           fi
│   │   │       
│   │   │       FROM nginx:alpine
│   │   │       
│   │   │       COPY --from=builder /site/dist /usr/share/nginx/html
│   │   │       
│   │   │       RUN mkdir -p /etc/nginx/ssl
│   │   │       
│   │   │       COPY nginx.conf.template /etc/nginx/nginx.conf.template
│   │   │       
│   │   │       COPY entrypoint.sh /entrypoint.sh
│   │   │       RUN chmod +x /entrypoint.sh
│   │   │       
│   │   │       ENTRYPOINT ["/entrypoint.sh"]
│   │   │       CMD ["nginx", "-g", "daemon off;"]
│   │   ├── entrypoint.sh
│   │   │   Content:
│   │   │       #!/bin/sh
│   │   │       set -e
│   │   │       
│   │   │       # Check if SSL cert and key are provided
│   │   │       if [ ! -f "/etc/nginx/ssl/cert.pem" ] || [ ! -f "/etc/nginx/ssl/key.pem" ]; then
│   │   │           echo "Error: SSL certificate and/or key not found in /etc/nginx/ssl/"
│   │   │           echo "Please provide both cert.pem and key.pem"
│   │   │           exit 1
│   │   │       fi
│   │   │       
│   │   │       # Replace the placeholder with the actual HTTPS_PORT
│   │   │       if [ -z "$HTTPS_PORT" ]; then
│   │   │           echo "Error: HTTPS_PORT environment variable is not set"
│   │   │           exit 1
│   │   │       fi
│   │   │       
│   │   │       sed -i "s/HTTPS_PORT_PLACEHOLDER/${HTTPS_PORT}/g" /etc/nginx/nginx.conf.template
│   │   │       mv /etc/nginx/nginx.conf.template /etc/nginx/nginx.conf
│   │   │       
│   │   │       # Execute the CMD
│   │   │       exec "$@"
│   │   ├── nginx.conf.template
│   │   │   Content:
│   │   │       events {
│   │   │           worker_connections 1024;
│   │   │       }
│   │   │       
│   │   │       http {
│   │   │           include       /etc/nginx/mime.types;
│   │   │           default_type  application/octet-stream;
│   │   │       
│   │   │           server {
│   │   │               listen HTTPS_PORT_PLACEHOLDER ssl;
│   │   │               server_name localhost;
│   │   │       
│   │   │               ssl_certificate /etc/nginx/ssl/cert.pem;
│   │   │               ssl_certificate_key /etc/nginx/ssl/key.pem;
│   │   │       
│   │   │               root /usr/share/nginx/html;
│   │   │               index index.html;
│   │   │       
│   │   │               location / {
│   │   │                   try_files $uri $uri/ =404;
│   │   │               }
│   │   │       
│   │   │               location ~* \.(css|js|png|jpg|jpeg|gif|ico)$ {
│   │   │                   expires max;
│   │   │                   log_not_found off;
│   │   │                   access_log off;
│   │   │                   add_header Cache-Control "public, max-age=31536000";
│   │   │               }
│   │   │       
│   │   │               error_page 404 /404.html;
│   │   │               error_page 500 502 503 504 /50x.html;
│   │   │           }
│   │   │       
│   │   │           sendfile on;
│   │   │           tcp_nopush on;
│   │   │           tcp_nodelay on;
│   │   │           keepalive_timeout 65;
│   │   │           types_hash_max_size 2048;
│   │   │       }
│   │   ├── package.json
│   │   │   Content:
│   │   │       {
│   │   │         "name": "@linguaquiz/frontend",
│   │   │         "version": "1.0.0",
│   │   │         "type": "module",
│   │   │         "scripts": {
│   │   │           "start": "vite",
│   │   │           "build:dev": "vite build --mode development",
│   │   │           "build:prod": "vite build --mode production",
│   │   │           "preview": "vite preview"
│   │   │         },
│   │   │         "keywords": [],
│   │   │         "author": "",
│   │   │         "license": "ISC",
│   │   │         "dependencies": {
│   │   │           "axios": "^1.7.3",
│   │   │           "https": "^1.0.0",
│   │   │           "live-server": "^1.2.2",
│   │   │           "vite": "^5.3.5",
│   │   │           "vite-plugin-static-copy": "^1.0.6"
│   │   │         },
│   │   │         "description": ""
│   │   │       }
│   │   ├── src
│   │   │   ├── css
│   │   │   │   └── styles.css
│   │   │   │       Content:
│   │   │   │           :root {
│   │   │   │               --background-color: #f4f4f9;
│   │   │   │               --text-color: #333;
│   │   │   │               --primary-color: #007bff;
│   │   │   │               --hover-color: #0056b3;
│   │   │   │               --container-bg: #fff;
│   │   │   │               --shadow-color: rgba(0,0,0,0.1);
│   │   │   │               --input-border-color: #ccc;
│   │   │   │               --transition-speed: 0.3s;
│   │   │   │               --success-color: #28a745;
│   │   │   │               --error-color: #dc3545;
│   │   │   │           }
│   │   │   │           
│   │   │   │           * {
│   │   │   │               box-sizing: border-box;
│   │   │   │               margin: 0;
│   │   │   │               padding: 0;
│   │   │   │           }
│   │   │   │           
│   │   │   │           body {
│   │   │   │               font-family: 'Arial', sans-serif;
│   │   │   │               background-color: var(--background-color);
│   │   │   │               color: var(--text-color);
│   │   │   │               line-height: 1.6;
│   │   │   │               padding: 20px;
│   │   │   │               display: flex;
│   │   │   │               justify-content: center;
│   │   │   │               align-items: flex-start;
│   │   │   │               flex-wrap: wrap;
│   │   │   │               min-height: 100vh;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .container, .stats-container {
│   │   │   │               background-color: var(--container-bg);
│   │   │   │               padding: 30px;
│   │   │   │               box-shadow: 0 4px 12px var(--shadow-color);
│   │   │   │               border-radius: 12px;
│   │   │   │               margin: 15px;
│   │   │   │               width: 90%;
│   │   │   │               max-width: 650px;
│   │   │   │               display: flex;
│   │   │   │               flex-direction: column;
│   │   │   │               align-items: center;
│   │   │   │               transition: box-shadow var(--transition-speed) ease;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .container:hover, .stats-container:hover {
│   │   │   │               box-shadow: 0 6px 16px var(--shadow-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           h1, h2, h3 {
│   │   │   │               text-align: center;
│   │   │   │               width: 100%;
│   │   │   │               margin-bottom: 20px;
│   │   │   │               color: var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           h1 { font-size: 2.5em; }
│   │   │   │           h2 { font-size: 2em; }
│   │   │   │           h3 { font-size: 1.5em; }
│   │   │   │           
│   │   │   │           p, button, input[type="text"], input[type="password"], input[type="email"], ol, li {
│   │   │   │               width: 100%;
│   │   │   │               margin-bottom: 15px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           input[type="text"], input[type="password"], input[type="email"], button {
│   │   │   │               padding: 12px;
│   │   │   │               border-radius: 6px;
│   │   │   │               height: 44px;
│   │   │   │               font-size: 16px;
│   │   │   │               transition: all var(--transition-speed) ease;
│   │   │   │           }
│   │   │   │           
│   │   │   │           input[type="text"], input[type="password"], input[type="email"] {
│   │   │   │               border: 1px solid var(--input-border-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           input[type="text"]:focus, input[type="password"]:focus, input[type="email"]:focus {
│   │   │   │               outline: none;
│   │   │   │               border-color: var(--primary-color);
│   │   │   │               box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.25);
│   │   │   │           }
│   │   │   │           
│   │   │   │           button {
│   │   │   │               background-color: var(--primary-color);
│   │   │   │               color: white;
│   │   │   │               border: none;
│   │   │   │               cursor: pointer;
│   │   │   │               font-weight: bold;
│   │   │   │           }
│   │   │   │           
│   │   │   │           button:hover {
│   │   │   │               background-color: var(--hover-color);
│   │   │   │               transform: translateY(-2px);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .input-group {
│   │   │   │               display: flex;
│   │   │   │               flex-direction: column;
│   │   │   │               align-items: stretch;
│   │   │   │               width: 100%;
│   │   │   │               margin-top: 20px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           ol {
│   │   │   │               padding-left: 25px;
│   │   │   │               word-wrap: break-word;
│   │   │   │           }
│   │   │   │           
│   │   │   │           li {
│   │   │   │               margin-bottom: 10px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .info-text {
│   │   │   │               font-style: italic;
│   │   │   │               color: var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .quiz-section, .learning-section {
│   │   │   │               width: 100%;
│   │   │   │               margin-top: 20px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .progress-container {
│   │   │   │               display: flex;
│   │   │   │               flex-direction: column;
│   │   │   │               width: 100%;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .progress-container > div {
│   │   │   │               margin-bottom: 20px;
│   │   │   │               padding: 15px;
│   │   │   │               background-color: rgba(0, 123, 255, 0.1);
│   │   │   │               border-radius: 8px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .stats-grid {
│   │   │   │               display: grid;
│   │   │   │               grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
│   │   │   │               gap: 15px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .quiz-content {
│   │   │   │               display: flex;
│   │   │   │               flex-direction: column;
│   │   │   │               align-items: center;
│   │   │   │               width: 100%;
│   │   │   │               margin-bottom: 30px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .question {
│   │   │   │               width: 100%;
│   │   │   │               display: flex;
│   │   │   │               justify-content: center;
│   │   │   │               align-items: center;
│   │   │   │               margin-bottom: 30px;
│   │   │   │               min-height: 80px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           #word {
│   │   │   │               font-size: 2em;
│   │   │   │               font-weight: bold;
│   │   │   │               color: var(--primary-color);
│   │   │   │               padding: 15px 25px;
│   │   │   │               background-color: rgba(0, 123, 255, 0.1);
│   │   │   │               border-radius: 8px;
│   │   │   │               transition: all var(--transition-speed) ease;
│   │   │   │               text-align: center;
│   │   │   │               display: inline-flex;
│   │   │   │               justify-content: center;
│   │   │   │               align-items: center;
│   │   │   │               min-width: 200px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           #word:hover {
│   │   │   │               transform: scale(1.05);
│   │   │   │               box-shadow: 0 2px 8px var(--shadow-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .feedback-text {
│   │   │   │               font-weight: bold;
│   │   │   │               text-align: center;
│   │   │   │               padding: 10px;
│   │   │   │               margin-top: 10px;
│   │   │   │               border-radius: 6px;
│   │   │   │               transition: all var(--transition-speed) ease;
│   │   │   │               width: 100%;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .feedback-text.success {
│   │   │   │               background-color: rgba(40, 167, 69, 0.1);
│   │   │   │               color: var(--success-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .feedback-text.error {
│   │   │   │               background-color: rgba(220, 53, 69, 0.1);
│   │   │   │               color: var(--error-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .direction-toggle {
│   │   │   │               display: flex;
│   │   │   │               align-items: center;
│   │   │   │               justify-content: center;
│   │   │   │               margin-bottom: 20px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .switch {
│   │   │   │               position: relative;
│   │   │   │               display: inline-block;
│   │   │   │               width: 60px;
│   │   │   │               height: 34px;
│   │   │   │               margin-right: 10px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .switch input {
│   │   │   │               opacity: 0;
│   │   │   │               width: 0;
│   │   │   │               height: 0;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .slider {
│   │   │   │               position: absolute;
│   │   │   │               cursor: pointer;
│   │   │   │               top: 0;
│   │   │   │               left: 0;
│   │   │   │               right: 0;
│   │   │   │               bottom: 0;
│   │   │   │               background-color: #ccc;
│   │   │   │               transition: .4s;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .slider:before {
│   │   │   │               position: absolute;
│   │   │   │               content: "";
│   │   │   │               height: 26px;
│   │   │   │               width: 26px;
│   │   │   │               left: 4px;
│   │   │   │               bottom: 4px;
│   │   │   │               background-color: white;
│   │   │   │               transition: .4s;
│   │   │   │           }
│   │   │   │           
│   │   │   │           input:checked + .slider {
│   │   │   │               background-color: var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           input:focus + .slider {
│   │   │   │               box-shadow: 0 0 1px var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           input:checked + .slider:before {
│   │   │   │               transform: translateX(26px);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .slider.round {
│   │   │   │               border-radius: 34px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .slider.round:before {
│   │   │   │               border-radius: 50%;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .loading-indicator {
│   │   │   │               display: flex;
│   │   │   │               justify-content: center;
│   │   │   │               align-items: center;
│   │   │   │               font-size: 1.2em;
│   │   │   │               color: var(--primary-color);
│   │   │   │               margin-bottom: 20px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           .loading-indicator i {
│   │   │   │               margin-right: 10px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           #direction-label {
│   │   │   │               font-weight: bold;
│   │   │   │               color: var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           /* Styles for login and registration functionality */
│   │   │   │           .login-section, .register-section {
│   │   │   │               max-width: 400px;
│   │   │   │               margin: 20px auto;
│   │   │   │               padding: 20px;
│   │   │   │               background-color: var(--container-bg);
│   │   │   │               border-radius: 8px;
│   │   │   │               box-shadow: 0 2px 8px var(--shadow-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           .login-section h2, .register-section h2 {
│   │   │   │               margin-bottom: 20px;
│   │   │   │               color: var(--primary-color);
│   │   │   │           }
│   │   │   │           
│   │   │   │           #user-status {
│   │   │   │               position: absolute;
│   │   │   │               top: 20px;
│   │   │   │               right: 20px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           #login-logout-btn {
│   │   │   │               padding: 8px 16px;
│   │   │   │               font-size: 14px;
│   │   │   │           }
│   │   │   │           
│   │   │   │           #login-message, #register-message {
│   │   │   │               text-align: center;
│   │   │   │               margin-top: 15px;
│   │   │   │               font-weight: bold;
│   │   │   │           }
│   │   │   │           
│   │   │   │           @media (max-width: 768px) {
│   │   │   │               .container, .stats-container, .login-section, .register-section {
│   │   │   │                   width: 95%;
│   │   │   │                   padding: 20px;
│   │   │   │               }
│   │   │   │           
│   │   │   │               #user-status {
│   │   │   │                   position: static;
│   │   │   │                   text-align: center;
│   │   │   │                   margin-bottom: 20px;
│   │   │   │               }
│   │   │   │           }
│   │   │   │           
│   │   │   │           @media (max-width: 480px) {
│   │   │   │               body, p, button, input[type="text"], input[type="password"], input[type="email"] {
│   │   │   │                   font-size: 14px;
│   │   │   │               }
│   │   │   │               
│   │   │   │               h1 { font-size: 24px; }
│   │   │   │               h2 { font-size: 20px; }
│   │   │   │               h3 { font-size: 18px; }
│   │   │   │               
│   │   │   │               ol {
│   │   │   │                   padding-left: 20px;
│   │   │   │               }
│   │   │   │               
│   │   │   │               .container, .stats-container, .login-section, .register-section {
│   │   │   │                   padding: 15px;
│   │   │   │               }
│   │   │   │               
│   │   │   │               .stats-grid {
│   │   │   │                   grid-template-columns: 1fr;
│   │   │   │               }
│   │   │   │           }
│   │   │   ├── index.html
│   │   │   │   Content:
│   │   │   │       <!DOCTYPE html>
│   │   │   │       <html lang="en">
│   │   │   │       <head>
│   │   │   │           <meta charset="UTF-8">
│   │   │   │           <meta name="viewport" content="width=device-width, initial-scale=1.0">
│   │   │   │           <title>LinguaQuiz</title>
│   │   │   │           <link rel="stylesheet" href="css/styles.css">
│   │   │   │           <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
│   │   │   │       </head>
│   │   │   │       <body>
│   │   │   │           <main class="container">
│   │   │   │               <div id="loading-indicator" class="loading-indicator" style="display: none;">
│   │   │   │                   <i class="fas fa-spinner fa-spin"></i> Loading...
│   │   │   │               </div>
│   │   │   │               <div id="user-status">
│   │   │   │                   <button id="login-logout-btn"><i class="fas fa-sign-in-alt"></i> <span>Login</span></button>
│   │   │   │               </div>
│   │   │   │               <header>
│   │   │   │                   <h1><i class="fas fa-language"></i> LinguaQuiz</h1>
│   │   │   │               </header>
│   │   │   │               <section aria-labelledby="file-upload-section">
│   │   │   │                   <h2 id="file-upload-section">Upload or Select Quiz</h2>
│   │   │   │                   <div class="input-group">
│   │   │   │                       <input type="file" id="file-input" accept=".json" hidden>
│   │   │   │                       <button onclick="document.getElementById('file-input').click()"><i class="fas fa-upload"></i> Choose & Upload File</button>
│   │   │   │                       <button id="spanish-english"><i class="fas fa-book"></i> Use Default Spanish-English Set</button>
│   │   │   │                       <button id="spanish-russian"><i class="fas fa-book"></i> Use Default Spanish-Russian Set</button>
│   │   │   │                       <button id="german-russian"><i class="fas fa-book"></i> Use Default German-Russian Set</button>
│   │   │   │                       <button id="treasure-island-english-russian"><i class="fas fa-book"></i> Use Treasure Island
│   │   │   │                           English-Russian Set</button>
│   │   │   │                       <button id="download-quiz"><i class="fas fa-download"></i> Download Quiz</button>
│   │   │   │                   </div>
│   │   │   │               </section>
│   │   │   │               <section aria-labelledby="quiz-section" class="quiz-section">
│   │   │   │                   <h2 id="quiz-section">Quiz</h2>
│   │   │   │                   <div class="direction-toggle">
│   │   │   │                       <label for="direction-switch" class="switch">
│   │   │   │                           <input type="checkbox" id="direction-switch">
│   │   │   │                           <span class="slider round"></span>
│   │   │   │                       </label>
│   │   │   │                       <span id="direction-label">Normal</span>
│   │   │   │                   </div>
│   │   │   │                   <div class="quiz-content">
│   │   │   │                       <div class="question">
│   │   │   │                           <span id="word"></span>
│   │   │   │                       </div>
│   │   │   │                       <div class="input-group">
│   │   │   │                           <input type="text" id="answer" aria-label="Your translation" placeholder="Your translation">
│   │   │   │                           <button id="submit"><i class="fas fa-check"></i> Submit</button>
│   │   │   │                       </div>
│   │   │   │                   </div>
│   │   │   │                   <p id="feedback" class="feedback-text"></p>
│   │   │   │               </section>
│   │   │   │               <section aria-labelledby="learning-section" class="learning-section">
│   │   │   │                   <h2 id="learning-section">Learning Progress</h2>
│   │   │   │                   <div class="progress-container">
│   │   │   │                       <div id="focus-words">
│   │   │   │                           <h3><i class="fas fa-tasks"></i> Focus Words</h3>
│   │   │   │                           <ol id="focus-words-list"></ol>
│   │   │   │                       </div>
│   │   │   │                       <div id="mastered-one-direction">
│   │   │   │                           <h3><i class="fas fa-check-circle"></i> Mastered One Direction</h3>
│   │   │   │                           <ol id="mastered-one-direction-list"></ol>
│   │   │   │                       </div>
│   │   │   │                       <div id="mastered-vocabulary">
│   │   │   │                           <h3><i class="fas fa-check-circle"></i> Mastered Vocabulary</h3>
│   │   │   │                           <ol id="mastered-vocabulary-list"></ol>
│   │   │   │                       </div>
│   │   │   │                       <div id="upcoming-words">
│   │   │   │                           <h3><i class="fas fa-list"></i> Upcoming Words</h3>
│   │   │   │                           <ol id="upcoming-words-list"></ol>
│   │   │   │                       </div>
│   │   │   │                   </div>
│   │   │   │               </section>
│   │   │   │               <section aria-labelledby="stats-section" class="stats-section">
│   │   │   │                   <h2 id="stats-section"><i class="fas fa-chart-bar"></i> Quiz Stats</h2>
│   │   │   │                   <div class="stats-grid">
│   │   │   │                       <p>Total Attempts: <span id="total-attempts">0</span></p>
│   │   │   │                       <p>Correct Answers: <span id="correct-answers">0</span></p>
│   │   │   │                       <p>Incorrect Answers: <span id="incorrect-answers">0</span></p>
│   │   │   │                       <p>Correct Answer Percentage: <span id="correct-percentage">0%</span></p>
│   │   │   │                       <p>Average Time per Question: <span id="average-time">0</span> seconds</p>
│   │   │   │                   </div>
│   │   │   │               </section>
│   │   │   │           </main>
│   │   │   │           <script type="module" src="./js/app.js"></script>
│   │   │   │           <script type="module" src="./js/utils/BidirectionalMap.js"></script>
│   │   │   │           <script type="module" src="./js/utils/statsManager.js"></script>
│   │   │   │           <script type="module" src="./js/quiz/dataHandler.js"></script>
│   │   │   │           <script type="module" src="./js/quiz/wordSetManager.js"></script>
│   │   │   │           <script type="module" src="./js/quiz/quizManager.js"></script>
│   │   │   │           <script type="module" src="./js/ui/displayManager.js"></script>
│   │   │   │           <script type="module" src="./js/ui/eventHandlers.js"></script>
│   │   │   │           <script type="module" src="./js/ui/loginManager.js"></script>
│   │   │   │       </body>
│   │   │   │       
│   │   │   │       </html>
│   │   │   ├── js
│   │   │   │   ├── app.js
│   │   │   │   │   Content:
│   │   │   │   │       import BidirectionalMap from './utils/BidirectionalMap.js';
│   │   │   │   │       import initAuth from './ui/loginManager.js';
│   │   │   │   │       
│   │   │   │   │       export const quizWords = new BidirectionalMap();
│   │   │   │   │       export const focusWordsSet = new Set();
│   │   │   │   │       export const masteredOneDirectionSet = new Set();
│   │   │   │   │       export const masteredVocabularySet = new Set();
│   │   │   │   │       export const upcomingWordsSet = new Set();
│   │   │   │   │       
│   │   │   │   │       export let currentWord = '';
│   │   │   │   │       export let sourceLanguage = '';
│   │   │   │   │       export let targetLanguage = '';
│   │   │   │   │       export let direction = true;
│   │   │   │   │       
│   │   │   │   │       export const supportedLanguages = ['english', 'spanish', 'russian', 'german'];
│   │   │   │   │       
│   │   │   │   │       export function setCurrentWord(word) {
│   │   │   │   │         currentWord = word;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export function setDirection(newDirection) {
│   │   │   │   │         direction = newDirection;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export function setSourceLanguage(language) {
│   │   │   │   │         sourceLanguage = language;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       export function setTargetLanguage(language) {
│   │   │   │   │         targetLanguage = language;
│   │   │   │   │       }
│   │   │   │   │       
│   │   │   │   │       document.addEventListener('DOMContentLoaded', initAuth);
│   │   │   │   ├── quiz
│   │   │   │   │   ├── dataHandler.js
│   │   │   │   │   │   Content:
│   │   │   │   │   │       import {
│   │   │   │   │   │         quizWords,
│   │   │   │   │   │         focusWordsSet,
│   │   │   │   │   │         masteredOneDirectionSet,
│   │   │   │   │   │         masteredVocabularySet,
│   │   │   │   │   │         upcomingWordsSet,
│   │   │   │   │   │         sourceLanguage,
│   │   │   │   │   │         targetLanguage,
│   │   │   │   │   │         setSourceLanguage,
│   │   │   │   │   │         setTargetLanguage,
│   │   │   │   │   │         supportedLanguages,
│   │   │   │   │   │       } from '../app.js';
│   │   │   │   │   │       
│   │   │   │   │   │       function detectLanguages(data) {
│   │   │   │   │   │         const languages = new Set();
│   │   │   │   │   │         Object.values(data).forEach((words) => {
│   │   │   │   │   │           words.forEach((word) => {
│   │   │   │   │   │             Object.keys(word).forEach((lang) => {
│   │   │   │   │   │               if (supportedLanguages.includes(lang)) {
│   │   │   │   │   │                 languages.add(lang);
│   │   │   │   │   │               }
│   │   │   │   │   │             });
│   │   │   │   │   │           });
│   │   │   │   │   │         });
│   │   │   │   │   │         return Array.from(languages);
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function parseJSON(jsonData) {
│   │   │   │   │   │         let data;
│   │   │   │   │   │         try {
│   │   │   │   │   │           data = JSON.parse(jsonData);
│   │   │   │   │   │         } catch (error) {
│   │   │   │   │   │           console.error('Invalid JSON data:', error);
│   │   │   │   │   │           throw new Error('Invalid JSON data');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         if (!data || typeof data !== 'object') {
│   │   │   │   │   │           throw new Error('Invalid data structure in JSON');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         quizWords.clear();
│   │   │   │   │   │       
│   │   │   │   │   │         [focusWordsSet, masteredOneDirectionSet, masteredVocabularySet, upcomingWordsSet].forEach((set) =>
│   │   │   │   │   │           set.clear()
│   │   │   │   │   │         );
│   │   │   │   │   │       
│   │   │   │   │   │         const detectedLanguages = detectLanguages(data);
│   │   │   │   │   │         if (detectedLanguages.length < 2) {
│   │   │   │   │   │           throw new Error('At least two supported languages must be present in the data');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         setSourceLanguage(detectedLanguages[0]);
│   │   │   │   │   │         setTargetLanguage(detectedLanguages[1]);
│   │   │   │   │   │       
│   │   │   │   │   │         Object.entries(data).forEach(([category, words]) => {
│   │   │   │   │   │           if (!Array.isArray(words)) {
│   │   │   │   │   │             console.warn(`Invalid category data for ${category}`);
│   │   │   │   │   │             return;
│   │   │   │   │   │           }
│   │   │   │   │   │       
│   │   │   │   │   │           const currentSet = {
│   │   │   │   │   │             'Focus Words': focusWordsSet,
│   │   │   │   │   │             'Mastered One Direction': masteredOneDirectionSet,
│   │   │   │   │   │             'Mastered Vocabulary': masteredVocabularySet,
│   │   │   │   │   │             'Upcoming Words': upcomingWordsSet,
│   │   │   │   │   │           }[category];
│   │   │   │   │   │       
│   │   │   │   │   │           words.forEach((word) => {
│   │   │   │   │   │             if (typeof word === 'object' && word[sourceLanguage] && word[targetLanguage]) {
│   │   │   │   │   │               quizWords.set(word[sourceLanguage], word[targetLanguage]);
│   │   │   │   │   │               if (currentSet) currentSet.add(word[sourceLanguage]);
│   │   │   │   │   │             } else {
│   │   │   │   │   │               console.warn('Invalid word entry:', word);
│   │   │   │   │   │             }
│   │   │   │   │   │           });
│   │   │   │   │   │         });
│   │   │   │   │   │       
│   │   │   │   │   │         if (quizWords.size() === 0) {
│   │   │   │   │   │           throw new Error('No valid entries added to quizWords');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         while (focusWordsSet.size < 20 && upcomingWordsSet.size > 0) {
│   │   │   │   │   │           const wordToMove = upcomingWordsSet.values().next().value;
│   │   │   │   │   │           focusWordsSet.add(wordToMove);
│   │   │   │   │   │           upcomingWordsSet.delete(wordToMove);
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function generateJSON() {
│   │   │   │   │   │         const data = {
│   │   │   │   │   │           'Focus Words': [],
│   │   │   │   │   │           'Mastered One Direction': [],
│   │   │   │   │   │           'Mastered Vocabulary': [],
│   │   │   │   │   │           'Upcoming Words': [],
│   │   │   │   │   │         };
│   │   │   │   │   │       
│   │   │   │   │   │         [
│   │   │   │   │   │           [focusWordsSet, 'Focus Words'],
│   │   │   │   │   │           [masteredOneDirectionSet, 'Mastered One Direction'],
│   │   │   │   │   │           [masteredVocabularySet, 'Mastered Vocabulary'],
│   │   │   │   │   │           [upcomingWordsSet, 'Upcoming Words'],
│   │   │   │   │   │         ].forEach(([set, category]) => {
│   │   │   │   │   │           set.forEach((word) => {
│   │   │   │   │   │             data[category].push({
│   │   │   │   │   │               [sourceLanguage]: word,
│   │   │   │   │   │               [targetLanguage]: quizWords.get(word),
│   │   │   │   │   │             });
│   │   │   │   │   │           });
│   │   │   │   │   │         });
│   │   │   │   │   │       
│   │   │   │   │   │         const jsonContent = JSON.stringify(data, null, 2);
│   │   │   │   │   │         const blob = new Blob([jsonContent], { type: 'application/json;charset=utf-8;' });
│   │   │   │   │   │         const link = document.createElement('a');
│   │   │   │   │   │         link.href = URL.createObjectURL(blob);
│   │   │   │   │   │         link.download = 'quiz-data.json';
│   │   │   │   │   │         link.style.visibility = 'hidden';
│   │   │   │   │   │         document.body.appendChild(link);
│   │   │   │   │   │         link.click();
│   │   │   │   │   │         document.body.removeChild(link);
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function validateJSONStructure(data) {
│   │   │   │   │   │         if (typeof data !== 'object' || data === null) {
│   │   │   │   │   │           throw new Error('Invalid JSON structure: root should be an object');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         const requiredCategories = [
│   │   │   │   │   │           'Focus Words',
│   │   │   │   │   │           'Mastered One Direction',
│   │   │   │   │   │           'Mastered Vocabulary',
│   │   │   │   │   │           'Upcoming Words',
│   │   │   │   │   │         ];
│   │   │   │   │   │         // eslint-disable-next-line no-restricted-syntax
│   │   │   │   │   │         for (const category of requiredCategories) {
│   │   │   │   │   │           if (!Array.isArray(data[category])) {
│   │   │   │   │   │             throw new Error(`Invalid JSON structure: '${category}' should be an array`);
│   │   │   │   │   │           }
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         const languages = detectLanguages(data);
│   │   │   │   │   │         if (languages.length < 2) {
│   │   │   │   │   │           throw new Error('Invalid JSON structure: at least two supported languages are required');
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         Object.values(data).forEach((words) => {
│   │   │   │   │   │           words.forEach((word, index) => {
│   │   │   │   │   │             if (typeof word !== 'object' || word === null) {
│   │   │   │   │   │               throw new Error(`Invalid word entry at index ${index}: should be an object`);
│   │   │   │   │   │             }
│   │   │   │   │   │             if (!languages.every((lang) => typeof word[lang] === 'string')) {
│   │   │   │   │   │               throw new Error(
│   │   │   │   │   │                 `Invalid word entry at index ${index}: missing or invalid language entries`
│   │   │   │   │   │               );
│   │   │   │   │   │             }
│   │   │   │   │   │           });
│   │   │   │   │   │         });
│   │   │   │   │   │       }
│   │   │   │   │   ├── quizManager.js
│   │   │   │   │   │   Content:
│   │   │   │   │   │       import getRandomWordFromTopFew from './wordSetManager.js';
│   │   │   │   │   │       import { updateWordSetsDisplay } from '../ui/displayManager.js';
│   │   │   │   │   │       import { updateStats, getIncorrectPerWord } from '../utils/statsManager.js';
│   │   │   │   │   │       import {
│   │   │   │   │   │         quizWords,
│   │   │   │   │   │         focusWordsSet,
│   │   │   │   │   │         masteredOneDirectionSet,
│   │   │   │   │   │         setCurrentWord,
│   │   │   │   │   │         direction,
│   │   │   │   │   │         setDirection,
│   │   │   │   │   │       } from '../app.js';
│   │   │   │   │   │       
│   │   │   │   │   │       function askQuestion() {
│   │   │   │   │   │         const wordSet = direction ? focusWordsSet : masteredOneDirectionSet;
│   │   │   │   │   │         const newWord = getRandomWordFromTopFew(wordSet, getIncorrectPerWord());
│   │   │   │   │   │         setCurrentWord(newWord);
│   │   │   │   │   │         document.getElementById('word').textContent = direction ? newWord : quizWords.get(newWord);
│   │   │   │   │   │         return new Date();
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function initializeQuiz() {
│   │   │   │   │   │         try {
│   │   │   │   │   │           const startTime = askQuestion();
│   │   │   │   │   │           updateWordSetsDisplay();
│   │   │   │   │   │           return startTime;
│   │   │   │   │   │         } catch (error) {
│   │   │   │   │   │           console.error('Error initializing quiz:', error);
│   │   │   │   │   │           return null;
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function continueQuiz() {
│   │   │   │   │   │         const startTime = askQuestion();
│   │   │   │   │   │         updateWordSetsDisplay();
│   │   │   │   │   │         return startTime;
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function normalizeAndSortAnswer(answer) {
│   │   │   │   │   │         return answer
│   │   │   │   │   │           .toLowerCase()
│   │   │   │   │   │           .split(',')
│   │   │   │   │   │           .map((item) => item.trim().replace(/[^\p{Letter}]/gu, ''))
│   │   │   │   │   │           .filter((item) => item.length > 0)
│   │   │   │   │   │           .sort();
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function compareAnswers(arr1, arr2) {
│   │   │   │   │   │         return arr1.length === arr2.length && arr1.every((value, index) => value === arr2[index]);
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function verifyAnswer(userAnswer, startTime) {
│   │   │   │   │   │         const displayedWord = document.getElementById('word').textContent;
│   │   │   │   │   │         const correctAnswer = direction ? quizWords.get(displayedWord) : quizWords.getKey(displayedWord);
│   │   │   │   │   │         const originalWord = direction ? displayedWord : correctAnswer;
│   │   │   │   │   │       
│   │   │   │   │   │         const normalizedUserAnswer = normalizeAndSortAnswer(userAnswer);
│   │   │   │   │   │         const normalizedCorrectAnswer = normalizeAndSortAnswer(correctAnswer);
│   │   │   │   │   │       
│   │   │   │   │   │         const isAnswerCorrect = compareAnswers(normalizedUserAnswer, normalizedCorrectAnswer);
│   │   │   │   │   │         updateStats(isAnswerCorrect, originalWord, startTime, direction);
│   │   │   │   │   │       
│   │   │   │   │   │         return isAnswerCorrect;
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function toggleDirection() {
│   │   │   │   │   │         setDirection(!direction);
│   │   │   │   │   │         return direction;
│   │   │   │   │   │       }
│   │   │   │   │   └── wordSetManager.js
│   │   │   │   │       Content:
│   │   │   │   │           import { getIncorrectPerWord } from '../utils/statsManager.js';
│   │   │   │   │           
│   │   │   │   │           const lastAskedWords = [];
│   │   │   │   │           
│   │   │   │   │           export default function getRandomWordFromTopFew(wordSet) {
│   │   │   │   │             const stats = getIncorrectPerWord();
│   │   │   │   │             const sortedWords = Array.from(wordSet).map((word) => [word, stats[word] || 0]);
│   │   │   │   │             sortedWords.sort((a, b) => a[1] - b[1]);
│   │   │   │   │             const topFewWords = sortedWords.slice(0, 10).map((item) => item[0]);
│   │   │   │   │             const availableWords = topFewWords.filter((word) => !lastAskedWords.includes(word));
│   │   │   │   │           
│   │   │   │   │             let selectedWord;
│   │   │   │   │             if (availableWords.length > 0) {
│   │   │   │   │               selectedWord = availableWords[Math.floor(Math.random() * availableWords.length)];
│   │   │   │   │             } else {
│   │   │   │   │               selectedWord = topFewWords[Math.floor(Math.random() * topFewWords.length)];
│   │   │   │   │             }
│   │   │   │   │           
│   │   │   │   │             lastAskedWords.push(selectedWord);
│   │   │   │   │             if (lastAskedWords.length > 7) {
│   │   │   │   │               lastAskedWords.shift();
│   │   │   │   │             }
│   │   │   │   │             return selectedWord;
│   │   │   │   │           }
│   │   │   │   ├── ui
│   │   │   │   │   ├── displayManager.js
│   │   │   │   │   │   Content:
│   │   │   │   │   │       import { stats } from '../utils/statsManager.js';
│   │   │   │   │   │       import {
│   │   │   │   │   │         quizWords,
│   │   │   │   │   │         focusWordsSet,
│   │   │   │   │   │         masteredOneDirectionSet,
│   │   │   │   │   │         masteredVocabularySet,
│   │   │   │   │   │         upcomingWordsSet,
│   │   │   │   │   │         currentWord,
│   │   │   │   │   │         direction,
│   │   │   │   │   │       } from '../app.js';
│   │   │   │   │   │       
│   │   │   │   │   │       function updateSetDisplay(elementId, wordSet) {
│   │   │   │   │   │         const container = document.getElementById(elementId);
│   │   │   │   │   │         if (!container) {
│   │   │   │   │   │           console.error('updateSetDisplay: Failed to find element with ID', elementId);
│   │   │   │   │   │           return;
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         container.innerHTML = '';
│   │   │   │   │   │       
│   │   │   │   │   │         const wordsArray = Array.from(wordSet);
│   │   │   │   │   │         if (elementId === 'focus-words-list' && stats && stats.incorrectPerWord) {
│   │   │   │   │   │           wordsArray.sort((a, b) => (stats.incorrectPerWord[a] || 0) - (stats.incorrectPerWord[b] || 0));
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         wordsArray.forEach((word) => {
│   │   │   │   │   │           const listItem = document.createElement('li');
│   │   │   │   │   │           const translation = direction
│   │   │   │   │   │             ? quizWords.get(word)
│   │   │   │   │   │             : quizWords.getKey(word) || 'No translation available';
│   │   │   │   │   │           const displayText =
│   │   │   │   │   │             elementId === 'focus-words-list' && word === currentWord
│   │   │   │   │   │               ? `${word} (translation hidden)`
│   │   │   │   │   │               : `${word} (${translation})`;
│   │   │   │   │   │           listItem.textContent = displayText;
│   │   │   │   │   │           container.appendChild(listItem);
│   │   │   │   │   │         });
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function updateStatsDisplay() {
│   │   │   │   │   │         const elements = {
│   │   │   │   │   │           'total-attempts': stats.totalAttempts,
│   │   │   │   │   │           'correct-answers': stats.correctAnswers,
│   │   │   │   │   │           'incorrect-answers': stats.incorrectAnswers,
│   │   │   │   │   │           'correct-percentage': `${((stats.correctAnswers / stats.totalAttempts) * 100).toFixed(2)}%`,
│   │   │   │   │   │           'average-time': (
│   │   │   │   │   │             stats.timePerQuestion.reduce((a, b) => a + b, 0) / stats.timePerQuestion.length
│   │   │   │   │   │           ).toFixed(2),
│   │   │   │   │   │         };
│   │   │   │   │   │       
│   │   │   │   │   │         Object.entries(elements).forEach(([id, value]) => {
│   │   │   │   │   │           document.getElementById(id).textContent = value;
│   │   │   │   │   │         });
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       export function updateWordSetsDisplay() {
│   │   │   │   │   │         updateSetDisplay('focus-words-list', focusWordsSet);
│   │   │   │   │   │         updateSetDisplay('mastered-one-direction-list', masteredOneDirectionSet);
│   │   │   │   │   │         updateSetDisplay('mastered-vocabulary-list', masteredVocabularySet);
│   │   │   │   │   │         updateSetDisplay('upcoming-words-list', upcomingWordsSet);
│   │   │   │   │   │       }
│   │   │   │   │   ├── eventHandlers.js
│   │   │   │   │   │   Content:
│   │   │   │   │   │       import { initializeQuiz, verifyAnswer, continueQuiz } from '../quiz/quizManager.js';
│   │   │   │   │   │       import { generateJSON, parseJSON, validateJSONStructure } from '../quiz/dataHandler.js';
│   │   │   │   │   │       import { quizWords, setDirection, direction } from '../app.js';
│   │   │   │   │   │       import { updateStatsDisplay, updateWordSetsDisplay } from './displayManager.js';
│   │   │   │   │   │       
│   │   │   │   │   │       function setFeedback(message, isError = false) {
│   │   │   │   │   │         const feedbackElement = document.getElementById('feedback');
│   │   │   │   │   │         if (feedbackElement) {
│   │   │   │   │   │           feedbackElement.textContent = message;
│   │   │   │   │   │           feedbackElement.classList.toggle('error', isError);
│   │   │   │   │   │           feedbackElement.classList.toggle('success', !isError);
│   │   │   │   │   │         } else {
│   │   │   │   │   │           console.error('Feedback element not found');
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function setLoadingState(isLoading) {
│   │   │   │   │   │         const loadingElement = document.getElementById('loading-indicator');
│   │   │   │   │   │         if (loadingElement) {
│   │   │   │   │   │           loadingElement.style.display = isLoading ? 'block' : 'none';
│   │   │   │   │   │         } else {
│   │   │   │   │   │           console.error('Loading indicator element not found');
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       async function loadWords(filename) {
│   │   │   │   │   │         setLoadingState(true);
│   │   │   │   │   │         try {
│   │   │   │   │   │           const response = await fetch(`data/${filename}`);
│   │   │   │   │   │           if (!response.ok) {
│   │   │   │   │   │             throw new Error(`HTTP error! status: ${response.status}`);
│   │   │   │   │   │           }
│   │   │   │   │   │           const data = await response.json();
│   │   │   │   │   │           validateJSONStructure(data);
│   │   │   │   │   │           parseJSON(JSON.stringify(data));
│   │   │   │   │   │           const startTime = initializeQuiz(data);
│   │   │   │   │   │           if (startTime) {
│   │   │   │   │   │             updateStatsDisplay();
│   │   │   │   │   │             updateWordSetsDisplay();
│   │   │   │   │   │           }
│   │   │   │   │   │         } catch (error) {
│   │   │   │   │   │           console.error(`Error loading ${filename}:`, error);
│   │   │   │   │   │           setFeedback(`Failed to load ${filename}. Please try again.`, true);
│   │   │   │   │   │         } finally {
│   │   │   │   │   │           setLoadingState(false);
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       async function handleFileUpload() {
│   │   │   │   │   │         const fileInput = document.getElementById('file-input');
│   │   │   │   │   │         if (!fileInput) {
│   │   │   │   │   │           console.error('File input element not found');
│   │   │   │   │   │           return;
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         const file = fileInput.files[0];
│   │   │   │   │   │         if (file) {
│   │   │   │   │   │           if (file.type !== 'application/json') {
│   │   │   │   │   │             setFeedback('Please upload a JSON file.', true);
│   │   │   │   │   │             fileInput.value = ''; // Clear the file input
│   │   │   │   │   │             return;
│   │   │   │   │   │           }
│   │   │   │   │   │           setLoadingState(true);
│   │   │   │   │   │           try {
│   │   │   │   │   │             const data = await file.text();
│   │   │   │   │   │             const jsonData = JSON.parse(data);
│   │   │   │   │   │             validateJSONStructure(jsonData);
│   │   │   │   │   │             parseJSON(data);
│   │   │   │   │   │             const startTime = initializeQuiz(jsonData);
│   │   │   │   │   │             if (startTime) {
│   │   │   │   │   │               updateStatsDisplay();
│   │   │   │   │   │               updateWordSetsDisplay();
│   │   │   │   │   │             }
│   │   │   │   │   │           } catch (error) {
│   │   │   │   │   │             console.error('Error reading file:', error);
│   │   │   │   │   │             setFeedback(`Error reading file: ${error.message}`, true);
│   │   │   │   │   │           } finally {
│   │   │   │   │   │             setLoadingState(false);
│   │   │   │   │   │             fileInput.value = ''; // Clear the file input
│   │   │   │   │   │           }
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function handleEnterKey(event) {
│   │   │   │   │   │         if (event.key === 'Enter') {
│   │   │   │   │   │           event.preventDefault();
│   │   │   │   │   │           const submitButton = document.getElementById('submit');
│   │   │   │   │   │           if (submitButton) {
│   │   │   │   │   │             submitButton.click();
│   │   │   │   │   │           } else {
│   │   │   │   │   │             console.error('Submit button not found');
│   │   │   │   │   │           }
│   │   │   │   │   │         }
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function submitAnswer() {
│   │   │   │   │   │         const answerInput = document.getElementById('answer');
│   │   │   │   │   │         const wordElement = document.getElementById('word');
│   │   │   │   │   │       
│   │   │   │   │   │         if (!answerInput || !wordElement) {
│   │   │   │   │   │           console.error('Answer input or word element not found');
│   │   │   │   │   │           return;
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         const userAnswer = answerInput.value;
│   │   │   │   │   │         const originalWord = wordElement.textContent;
│   │   │   │   │   │         const startTime = new Date();
│   │   │   │   │   │         const isAnswerCorrect = verifyAnswer(userAnswer, startTime);
│   │   │   │   │   │       
│   │   │   │   │   │         if (isAnswerCorrect) {
│   │   │   │   │   │           setFeedback('Correct!', false);
│   │   │   │   │   │         } else {
│   │   │   │   │   │           const translation = direction ? quizWords.get(originalWord) : quizWords.getKey(originalWord);
│   │   │   │   │   │           setFeedback(`Wrong. '${originalWord}' - '${translation}'`, true);
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         answerInput.value = '';
│   │   │   │   │   │         continueQuiz();
│   │   │   │   │   │         updateStatsDisplay();
│   │   │   │   │   │         updateWordSetsDisplay();
│   │   │   │   │   │         answerInput.focus();
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       function handleDirectionSwitch() {
│   │   │   │   │   │         const switchElement = document.getElementById('direction-switch');
│   │   │   │   │   │         const label = document.getElementById('direction-label');
│   │   │   │   │   │       
│   │   │   │   │   │         if (!switchElement || !label) {
│   │   │   │   │   │           console.error('Direction switch or label not found');
│   │   │   │   │   │           return;
│   │   │   │   │   │         }
│   │   │   │   │   │       
│   │   │   │   │   │         const newDirection = switchElement.checked;
│   │   │   │   │   │         setDirection(!newDirection); // Reverse the direction
│   │   │   │   │   │         label.textContent = newDirection ? 'Reverse' : 'Normal';
│   │   │   │   │   │         continueQuiz();
│   │   │   │   │   │         updateWordSetsDisplay();
│   │   │   │   │   │       }
│   │   │   │   │   │       
│   │   │   │   │   │       document.addEventListener('DOMContentLoaded', () => {
│   │   │   │   │   │         const elements = {
│   │   │   │   │   │           'spanish-english': () => loadWords('SpanishEnglish.json'),
│   │   │   │   │   │           'spanish-russian': () => loadWords('SpanishRussian.json'),
│   │   │   │   │   │           'german-russian': () => loadWords('GermanRussian.json'),
│   │   │   │   │   │           'treasure-island-english-russian': () => loadWords('TreasureIslandEnglishRussian.json'),
│   │   │   │   │   │           'file-input': handleFileUpload,
│   │   │   │   │   │           answer: (e) => handleEnterKey(e),
│   │   │   │   │   │           submit: submitAnswer,
│   │   │   │   │   │           'download-quiz': generateJSON,
│   │   │   │   │   │           'direction-switch': handleDirectionSwitch,
│   │   │   │   │   │         };
│   │   │   │   │   │       
│   │   │   │   │   │         Object.entries(elements).forEach(([id, handler]) => {
│   │   │   │   │   │           const element = document.getElementById(id);
│   │   │   │   │   │           if (element) {
│   │   │   │   │   │             if (id === 'answer') {
│   │   │   │   │   │               element.addEventListener('keydown', handler);
│   │   │   │   │   │             } else if (id === 'direction-switch') {
│   │   │   │   │   │               element.addEventListener('change', handler);
│   │   │   │   │   │             } else {
│   │   │   │   │   │               element.addEventListener('click', handler);
│   │   │   │   │   │             }
│   │   │   │   │   │           } else {
│   │   │   │   │   │             console.error(`Element with id '${id}' not found`);
│   │   │   │   │   │           }
│   │   │   │   │   │         });
│   │   │   │   │   │       });
│   │   │   │   │   └── loginManager.js
│   │   │   │   │       Content:
│   │   │   │   │           const SERVER_ADDRESS = process.env.SERVER_ADDRESS;
│   │   │   │   │           
│   │   │   │   │           function redirectToLogin() {
│   │   │   │   │             window.location.href = '/login.html';
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           function logout() {
│   │   │   │   │             localStorage.removeItem('token');
│   │   │   │   │             localStorage.removeItem('email');
│   │   │   │   │             // eslint-disable-next-line no-use-before-define
│   │   │   │   │             updateLoginStatus();
│   │   │   │   │             window.location.href = 'login.html';
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           function updateLoginStatus() {
│   │   │   │   │             const loginLogoutBtn = document.getElementById('login-logout-btn');
│   │   │   │   │             const token = localStorage.getItem('token');
│   │   │   │   │             const email = localStorage.getItem('email');
│   │   │   │   │           
│   │   │   │   │             if (loginLogoutBtn) {
│   │   │   │   │               if (token && email) {
│   │   │   │   │                 // eslint-disable-next-line max-len
│   │   │   │   │                 loginLogoutBtn.innerHTML = `<i class="fas fa-sign-out-alt"></i> <span>Logout (${email})</span>`;
│   │   │   │   │                 loginLogoutBtn.removeEventListener('click', redirectToLogin);
│   │   │   │   │                 loginLogoutBtn.addEventListener('click', logout);
│   │   │   │   │               } else {
│   │   │   │   │                 loginLogoutBtn.innerHTML = '<i class="fas fa-sign-in-alt"></i> <span>Login</span>';
│   │   │   │   │                 loginLogoutBtn.removeEventListener('click', logout);
│   │   │   │   │                 if (!window.location.pathname.includes('login.html')) {
│   │   │   │   │                   loginLogoutBtn.addEventListener('click', redirectToLogin);
│   │   │   │   │                 }
│   │   │   │   │               }
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           async function handleLogin(e) {
│   │   │   │   │             e.preventDefault();
│   │   │   │   │             const email = document.getElementById('email').value;
│   │   │   │   │             const password = document.getElementById('password').value;
│   │   │   │   │             const loginMessage = document.getElementById('login-message');
│   │   │   │   │           
│   │   │   │   │             try {
│   │   │   │   │               const response = await fetch(`${SERVER_ADDRESS}/login`, {
│   │   │   │   │                 method: 'POST',
│   │   │   │   │                 headers: {
│   │   │   │   │                   'Content-Type': 'application/json',
│   │   │   │   │                 },
│   │   │   │   │                 body: JSON.stringify({ email, password }),
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               const data = await response.json();
│   │   │   │   │           
│   │   │   │   │               if (response.ok) {
│   │   │   │   │                 localStorage.setItem('token', data.token);
│   │   │   │   │                 localStorage.setItem('email', email);
│   │   │   │   │                 loginMessage.textContent = 'Login successful. Redirecting...';
│   │   │   │   │                 setTimeout(() => {
│   │   │   │   │                   window.location.href = '/'; // Redirect to the home page
│   │   │   │   │                 }, 1500);
│   │   │   │   │               } else {
│   │   │   │   │                 loginMessage.textContent = data.message || 'Invalid email or password';
│   │   │   │   │               }
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Login error:', error);
│   │   │   │   │               loginMessage.textContent = `An error occurred: ${error.message}. Please try again.`;
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           async function handleRegister(e) {
│   │   │   │   │             e.preventDefault();
│   │   │   │   │             const email = document.getElementById('register-email').value;
│   │   │   │   │             const password = document.getElementById('register-password').value;
│   │   │   │   │             const registerMessage = document.getElementById('register-message');
│   │   │   │   │           
│   │   │   │   │             try {
│   │   │   │   │               const response = await fetch(`${SERVER_ADDRESS}/register`, {
│   │   │   │   │                 method: 'POST',
│   │   │   │   │                 headers: {
│   │   │   │   │                   'Content-Type': 'application/json',
│   │   │   │   │                 },
│   │   │   │   │                 body: JSON.stringify({ email, password }),
│   │   │   │   │               });
│   │   │   │   │           
│   │   │   │   │               const data = await response.json();
│   │   │   │   │           
│   │   │   │   │               if (response.ok) {
│   │   │   │   │                 registerMessage.textContent = 'Registration successful. You can now log in.';
│   │   │   │   │               } else {
│   │   │   │   │                 console.warn(`Registration failed: ${data.message || 'Registration failed'}`);
│   │   │   │   │                 registerMessage.textContent = data.message || 'Registration failed. Please try again.';
│   │   │   │   │               }
│   │   │   │   │             } catch (error) {
│   │   │   │   │               console.error('Registration error:', error);
│   │   │   │   │               registerMessage.textContent = `An error occurred: ${error.message}. Please try again.`;
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           function initializeForms() {
│   │   │   │   │             const loginForm = document.getElementById('login-form');
│   │   │   │   │             if (loginForm) {
│   │   │   │   │               loginForm.addEventListener('submit', handleLogin);
│   │   │   │   │             }
│   │   │   │   │           
│   │   │   │   │             const registerForm = document.getElementById('register-form');
│   │   │   │   │             if (registerForm) {
│   │   │   │   │               registerForm.addEventListener('submit', handleRegister);
│   │   │   │   │             }
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           function initAuth() {
│   │   │   │   │             initializeForms();
│   │   │   │   │             updateLoginStatus();
│   │   │   │   │           }
│   │   │   │   │           
│   │   │   │   │           export default initAuth;
│   │   │   │   └── utils
│   │   │   │       ├── BidirectionalMap.js
│   │   │   │       │   Content:
│   │   │   │       │       export default class BidirectionalMap {
│   │   │   │       │         constructor() {
│   │   │   │       │           this.map = new Map();
│   │   │   │       │           this.reverseMap = new Map();
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         set(key, value) {
│   │   │   │       │           this.map.set(key, value);
│   │   │   │       │           this.reverseMap.set(value, key);
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         get(key) {
│   │   │   │       │           return this.map.get(key);
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         getKey(value) {
│   │   │   │       │           return this.reverseMap.get(value);
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         delete(key) {
│   │   │   │       │           const value = this.map.get(key);
│   │   │   │       │           this.map.delete(key);
│   │   │   │       │           this.reverseMap.delete(value);
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         clear() {
│   │   │   │       │           this.map.clear();
│   │   │   │       │           this.reverseMap.clear();
│   │   │   │       │         }
│   │   │   │       │       
│   │   │   │       │         size() {
│   │   │   │       │           return this.map.size;
│   │   │   │       │         }
│   │   │   │       │       }
│   │   │   │       └── statsManager.js
│   │   │   │           Content:
│   │   │   │               import {
│   │   │   │                 focusWordsSet,
│   │   │   │                 masteredOneDirectionSet,
│   │   │   │                 upcomingWordsSet,
│   │   │   │                 masteredVocabularySet,
│   │   │   │               } from '../app.js';
│   │   │   │               
│   │   │   │               export const stats = {
│   │   │   │                 totalAttempts: 0,
│   │   │   │                 correctAnswers: 0,
│   │   │   │                 incorrectAnswers: 0,
│   │   │   │                 attemptsPerWord: {},
│   │   │   │                 correctPerWord: {},
│   │   │   │                 incorrectPerWord: {},
│   │   │   │                 timePerWord: {},
│   │   │   │                 timePerQuestion: [],
│   │   │   │               };
│   │   │   │               
│   │   │   │               export function updateStats(isTheAnswerCorrect, originalWord, startTime, direction) {
│   │   │   │                 const endTime = new Date();
│   │   │   │                 const timeTaken = (endTime - startTime) / 1000;
│   │   │   │                 stats.totalAttempts += 1;
│   │   │   │                 stats.timePerQuestion.push(timeTaken);
│   │   │   │               
│   │   │   │                 if (!stats.attemptsPerWord[originalWord]) {
│   │   │   │                   stats.attemptsPerWord[originalWord] = { attempts: 0, correct: 0, incorrect: 0 };
│   │   │   │                   stats.timePerWord[originalWord] = [];
│   │   │   │                 }
│   │   │   │               
│   │   │   │                 const wordStats = stats.attemptsPerWord[originalWord];
│   │   │   │                 wordStats.attempts += 1;
│   │   │   │                 stats.timePerWord[originalWord].push(timeTaken);
│   │   │   │               
│   │   │   │                 if (isTheAnswerCorrect) {
│   │   │   │                   stats.correctAnswers += 1;
│   │   │   │                   wordStats.correct += 1;
│   │   │   │               
│   │   │   │                   if (direction) {
│   │   │   │                     if (wordStats.correct === 3 && focusWordsSet.has(originalWord)) {
│   │   │   │                       masteredOneDirectionSet.add(originalWord);
│   │   │   │                       focusWordsSet.delete(originalWord);
│   │   │   │                       if (upcomingWordsSet.size > 0) {
│   │   │   │                         const newWord = upcomingWordsSet.values().next().value;
│   │   │   │                         focusWordsSet.add(newWord);
│   │   │   │                         upcomingWordsSet.delete(newWord);
│   │   │   │                       }
│   │   │   │                     }
│   │   │   │                   } else if (wordStats.correct === 6 && masteredOneDirectionSet.has(originalWord)) {
│   │   │   │                     masteredVocabularySet.add(originalWord);
│   │   │   │                     masteredOneDirectionSet.delete(originalWord);
│   │   │   │                     if (masteredOneDirectionSet.size > 0) {
│   │   │   │                       const newWord = masteredOneDirectionSet.values().next().value;
│   │   │   │                       focusWordsSet.add(newWord);
│   │   │   │                       masteredOneDirectionSet.delete(newWord);
│   │   │   │                     }
│   │   │   │                   }
│   │   │   │                 } else {
│   │   │   │                   stats.incorrectAnswers += 1;
│   │   │   │                   wordStats.incorrect += 1;
│   │   │   │                   stats.incorrectPerWord[originalWord] = (stats.incorrectPerWord[originalWord] || 0) + 1;
│   │   │   │                 }
│   │   │   │               }
│   │   │   │               
│   │   │   │               export function getIncorrectPerWord() {
│   │   │   │                 return stats.incorrectPerWord;
│   │   │   │               }
│   │   │   └── login.html
│   │   │       Content:
│   │   │           <!DOCTYPE html>
│   │   │           <html lang="en">
│   │   │           
│   │   │           <head>
│   │   │               <meta charset="UTF-8">
│   │   │               <meta name="viewport" content="width=device-width, initial-scale=1.0">
│   │   │               <title>LinguaQuiz - Login/Register</title>
│   │   │               <link rel="stylesheet" href="css/styles.css">
│   │   │               <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
│   │   │           </head>
│   │   │           
│   │   │           <body>
│   │   │               <main class="container">
│   │   │                   <header>
│   │   │                       <h1><i class="fas fa-language"></i> LinguaQuiz</h1>
│   │   │                   </header>
│   │   │                   <section aria-labelledby="login-section" class="login-section">
│   │   │                       <h2 id="login-section">Login</h2>
│   │   │                       <form id="login-form">
│   │   │                           <div class="input-group">
│   │   │                               <input type="email" id="email" name="email" required placeholder="Email">
│   │   │                           </div>
│   │   │                           <div class="input-group">
│   │   │                               <input type="password" id="password" name="password" required placeholder="Password">
│   │   │                           </div>
│   │   │                           <button type="submit"><i class="fas fa-sign-in-alt"></i> Login</button>
│   │   │                       </form>
│   │   │                       <p id="login-message"></p>
│   │   │                   </section>
│   │   │           
│   │   │                   <section aria-labelledby="register-section" class="register-section">
│   │   │                       <h2 id="register-section">Register</h2>
│   │   │                       <form id="register-form">
│   │   │                           <div class="input-group">
│   │   │                               <input type="email" id="register-email" name="email" required placeholder="Email">
│   │   │                           </div>
│   │   │                           <div class="input-group">
│   │   │                               <input type="password" id="register-password" name="password" required placeholder="Password">
│   │   │                           </div>
│   │   │                           <button type="submit"><i class="fas fa-user-plus"></i> Register</button>
│   │   │                       </form>
│   │   │                       <p id="register-message"></p>
│   │   │                   </section>
│   │   │               </main>
│   │   │               <script type="module">
│   │   │                   import initAuth from './js/ui/loginManager.js';
│   │   │                   initAuth();
│   │   │               </script>
│   │   │           </body>
│   │   │           
│   │   │           </html>
│   │   └── vite.config.js
│   │       Content:
│   │           import { defineConfig } from 'vite';
│   │           import { viteStaticCopy } from 'vite-plugin-static-copy';
│   │           
│   │           export default defineConfig(({ mode }) => {
│   │             const serverAddress =
│   │               mode === 'production'
│   │                 ? 'https://api-lingua-quiz.nikolay-eremeev.com:443'
│   │                 : 'https://test-api-lingua-quiz.nikolay-eremeev.com:443';
│   │           
│   │             return {
│   │               root: 'src',
│   │               build: {
│   │                 outDir: '../dist',
│   │                 emptyOutDir: true,
│   │                 rollupOptions: {
│   │                   input: {
│   │                     main: 'src/index.html',
│   │                     login: 'src/login.html',
│   │                   },
│   │                   external: ['fs', 'https', 'path'], // Exclude Node.js built-in modules
│   │                 },
│   │               },
│   │               define: {
│   │                 'process.env.SERVER_ADDRESS': JSON.stringify(serverAddress),
│   │               },
│   │               plugins: [
│   │                 viteStaticCopy({
│   │                   targets: [
│   │                     {
│   │                       src: 'data/*',
│   │                       dest: '../dist/data',
│   │                     },
│   │                   ],
│   │                 }),
│   │               ],
│   │             };
│   │           });
