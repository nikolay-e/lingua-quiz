{{- if .Values.backup.enabled}}
apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{include "shared-postgres.fullname" .}}-backup
  namespace: {{include "shared-postgres.namespace" .}}
  labels:
    {{- include "shared-postgres.labels" . | nindent 4}}
    app.kubernetes.io/component: backup
spec:
  schedule: {{.Values.backup.schedule | quote}}
  concurrencyPolicy: {{.Values.backup.concurrencyPolicy}}
  successfulJobsHistoryLimit: {{.Values.backup.successfulJobsHistoryLimit}}
  failedJobsHistoryLimit: {{.Values.backup.failedJobsHistoryLimit}}
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
            - name: install-mc
              image: alpine:3.18
              command: ["/bin/sh", "-c"]
              args:
                - |
                  apk add --no-cache ca-certificates curl
                  curl -sSL https://dl.min.io/client/mc/release/linux-amd64/mc -o /usr/local/bin/mc
                  chmod +x /usr/local/bin/mc
                  cp /usr/local/bin/mc /tools/mc
              volumeMounts:
                - name: tools-volume
                  mountPath: /tools
          containers:
            - name: postgres-backup
              {{- if .Values.postgres.enabled}}
              # Use same postgres image as internal deployment (should include pg_dump)
              image: "{{.Values.postgres.image.repository}}:{{.Values.postgres.image.tag}}"
              imagePullPolicy: {{.Values.postgres.image.pullPolicy}}
              {{- else}}
              # Use lightweight alpine image with pg_dump for external PostgreSQL
              image: postgres:13-alpine
              imagePullPolicy: IfNotPresent
              {{- end}}
              env:
                # Use shared PostgreSQL admin credentials for backup
                - name: POSTGRES_USER
                  valueFrom:
                    secretKeyRef:
                      name: {{include "shared-postgres.fullname" .}}-admin
                      key: POSTGRES_USER
                - name: PGPASSWORD # pg_dump uses this env var
                  valueFrom:
                    secretKeyRef:
                      name: {{include "shared-postgres.fullname" .}}-admin
                      key: POSTGRES_PASSWORD
                - name: POSTGRES_HOST
                  value: {{include "shared-postgres.fullname" .}}.{{include "shared-postgres.namespace" .}}.svc.cluster.local
                # Reference the spaces credentials secret
                - name: SPACES_ACCESS_KEY_ID
                  valueFrom:
                    secretKeyRef:
                      name: {{include "shared-postgres.fullname" .}}-backup-spaces
                      key: SPACES_ACCESS_KEY_ID
                - name: SPACES_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: {{include "shared-postgres.fullname" .}}-backup-spaces
                      key: SPACES_SECRET_KEY
                # Spaces Configuration from values
                - name: SPACES_ENDPOINT_URL
                  value: {{.Values.backup.spaces.endpointUrl | quote}}
                - name: SPACES_BUCKET_NAME
                  value: {{.Values.backup.spaces.bucketName | quote}}
              command: ["/bin/sh", "-c"]
              args:
                - |
                  set -e
                  echo "Starting PostgreSQL backup process..."
                  TIMESTAMP=$(date +%Y-%m-%dT%H-%M-%S)

                  # Backup all application databases
                  {{- range $dbName, $dbConfig := .Values.databases}}
                  echo "Backing up database: {{$dbConfig.name}}"
                  BACKUP_FILE="/backup/{{$dbConfig.name}}-backup-${TIMESTAMP}.dump"
                  pg_dump -U $POSTGRES_USER -h $POSTGRES_HOST -d {{$dbConfig.name}} -Fc -f $BACKUP_FILE
                  echo "Dump for {{$dbConfig.name}} created successfully."
                  {{- end}}

                  echo "Configuring mc..."
                  /tools/mc alias set spaces https://${SPACES_ENDPOINT_URL} ${SPACES_ACCESS_KEY_ID} ${SPACES_SECRET_KEY}
                  echo "mc configured."

                  # Upload all backup files
                  {{- range $dbName, $dbConfig := .Values.databases}}
                  BACKUP_FILE="/backup/{{$dbConfig.name}}-backup-${TIMESTAMP}.dump"
                  TARGET_PATH="spaces/${SPACES_BUCKET_NAME}/backups/shared-postgres/{{$dbConfig.name}}-backup-${TIMESTAMP}.dump"
                  echo "Uploading ${BACKUP_FILE} to ${TARGET_PATH}..."
                  /tools/mc cp ${BACKUP_FILE} ${TARGET_PATH}
                  echo "Upload for {{$dbConfig.name}} complete."

                  echo "Cleaning up local file..."
                  rm ${BACKUP_FILE}
                  {{- end}}

                  echo "All database backups completed successfully."
              volumeMounts:
                - name: backup-volume
                  mountPath: /backup
                - name: tools-volume
                  mountPath: /tools
          volumes:
            - name: backup-volume
              emptyDir: {} # Use emptyDir for temporary storage during the job run
            - name: tools-volume
              emptyDir: {} # Use emptyDir for sharing tools between init and main containers
          restartPolicy: OnFailure # Job pods should run to completion or fail
{{- end}}
