apiVersion: v1
kind: ConfigMap
metadata:
  name: {{include "shared-postgres.fullname" .}}-init
  namespace: {{include "shared-postgres.namespace" .}}
  labels:
    {{- include "shared-postgres.labels" . | nindent 4}}
data:
  init-databases.sh: |
    #!/bin/bash
    set -e

    echo "Creating application databases and users..."

    {{- range $dbName, $dbConfig := .Values.databases}}
    # Create database and user for {{$dbName}}
    echo "Creating database: {{$dbConfig.name}}"

    # Read password from environment variable (set by secret mount)
    DB_PASSWORD_VAR="{{$dbName | upper | replace "-" "_"}}_PASSWORD"
    DB_PASSWORD=$(printenv "$DB_PASSWORD_VAR")

    if [ -z "$DB_PASSWORD" ]; then
      echo "Error: Password for {{$dbName}} not found in environment variable $DB_PASSWORD_VAR"
      exit 1
    fi

    # Use idempotent database and user creation
    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL
        -- Create database if it doesn't exist
        SELECT 'CREATE DATABASE "{{$dbConfig.name}}"'
        WHERE NOT EXISTS (SELECT FROM pg_database WHERE datname = '{{$dbConfig.name}}')\\gexec

        -- Create user if it doesn't exist
        DO \$\$
        BEGIN
          IF NOT EXISTS (SELECT FROM pg_catalog.pg_user WHERE usename = '{{$dbConfig.user}}') THEN
            CREATE USER "{{$dbConfig.user}}" WITH ENCRYPTED PASSWORD '$DB_PASSWORD';
          ELSE
            ALTER USER "{{$dbConfig.user}}" WITH ENCRYPTED PASSWORD '$DB_PASSWORD';
          END IF;
        END
        \$\$;

        -- Grant privileges
        GRANT ALL PRIVILEGES ON DATABASE "{{$dbConfig.name}}" TO "{{$dbConfig.user}}";
        ALTER DATABASE "{{$dbConfig.name}}" OWNER TO "{{$dbConfig.user}}";
    EOSQL
    echo "Database {{$dbConfig.name}} created/updated successfully"
    {{- end}}

    echo "All databases initialized successfully!"
