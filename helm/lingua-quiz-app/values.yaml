# Default values for lingua-quiz-app chart.
# This is a YAML-formatted file.

# Namespace configuration
# Default is lingua-quiz-production for production environment
# For staging deployment, override with: --set namespace=lingua-quiz-staging
namespace: lingua-quiz-production

replicaCount: 1

# Backend configuration
backend:
  image:
    repository: lingua-quiz-backend # Default, will be overridden by CI
    pullPolicy: IfNotPresent
    # Overridden by CI with specific tag
    tag: "latest"
  # Port the backend container listens on
  port: 9000 # Default port, will be overridden by CI for test/prod
  service:
    type: ClusterIP
    port: 9000 # Default service port, will be overridden by CI
  resources:
    limits:
      cpu: "500m"
      memory: "512Mi"
    requests:
      cpu: "250m"
      memory: "256Mi"
  # Liveness, Readiness, Startup probes configuration
  probes:
    liveness:
      path: /healthz
      initialDelaySeconds: 30
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    readiness:
      path: /healthz
      initialDelaySeconds: 5
      periodSeconds: 5
      timeoutSeconds: 3
      successThreshold: 1
      failureThreshold: 3
    startup:
      path: /healthz
      failureThreshold: 30
      periodSeconds: 10
      timeoutSeconds: 5

# Frontend configuration
frontend:
  image:
    repository: lingua-quiz-frontend # Default, will be overridden by CI
    pullPolicy: IfNotPresent
    tag: "latest" # Default, will be overridden by CI
  replicaCount: 1
  port: 80 # The port Nginx listens on inside the container
  service:
    type: ClusterIP
    port: 80
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"

# PostgreSQL configuration
postgres:
  enabled: true # Deploy PostgreSQL along with the backend
  image:
    repository: postgres
    tag: "13" # Match your existing version
    pullPolicy: IfNotPresent
  persistence:
    size: 5Gi # Match your existing PVC size
  resources: {} # Add resource requests/limits if needed

# Ingress configuration for external access
ingress:
  enabled: true
  className: "" # Specify if you have a specific ingress class, e.g., "nginx"
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # cert-manager.io/cluster-issuer: letsencrypt-prod # If using cert-manager
  frontend:
    host: lingua-quiz.nikolay-eremeev.com # To be set by CI/env
  backend:
    host: api-lingua-quiz.nikolay-eremeev.com # To be set by CI/env
  tls:
    enabled: true
    secretName: lingua-quiz-tls # Name of the K8s secret holding the cert/key

# Secrets - These MUST be provided during deployment (e.g., via --set or a secrets file)
secrets:
  # Values should be plain text, Helm will Base64 encode them
  jwtSecret: "<JWT_SECRET>" # Placeholder, must be set via --set
  postgresDb: "<POSTGRES_DB>" # Placeholder, must be set via --set
  postgresUser: "<POSTGRES_USER>" # Placeholder, must be set via --set
  postgresPassword: "<POSTGRES_PASSWORD>" # Placeholder, must be set via --set

# Service Account configuration
serviceAccount:
  # Set to true to create a specific service account
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  # If create is false, it defaults to 'default' within the helper.
  name: ""
# Database migrations configuration
migrations:
  enabled: true
  command: ["npm", "run", "migrate"]
  ttlSecondsAfterFinished: 120
  restartPolicy: OnFailure
  backoffLimit: 4
  resources:
    limits:
      cpu: "200m"
      memory: "256Mi"
    requests:
      cpu: "100m"
      memory: "128Mi"
  # Additional environment variables for migrations if needed
  # env:
  #   - name: MIGRATION_VERBOSITY
  #     value: "verbose"

# Optional configurations
# imagePullSecrets: []
# nameOverride: ""
# fullnameOverride: ""
# podSecurityContext: {}
# securityContext: {}
# nodeSelector: {}
# tolerations: []
# affinity: {}
