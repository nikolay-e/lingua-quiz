name: Backend Workflow

on:
  workflow_call:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}

      - name: Set environment variables
        run: |
          echo "DEPLOY_ENV=${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'test' }}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${{ github.head_ref || github.ref_name }}-${{ github.run_number }}" >> $GITHUB_ENV
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "LATEST_TAG=latest" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: ./packages/backend
          push: true
          tags: |
            ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend:${{ env.IMAGE_TAG }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/lingua-quiz-backend:latest', secrets.DOCKER_REGISTRY_USERNAME) || '' }}

      - name: Log build details
        run: |
          echo "::group::Build Details"
          echo "Environment: ${{ env.DEPLOY_ENV }}"
          echo "Image: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend:${{ env.IMAGE_TAG }}"
          [[ -n "${{ env.LATEST_TAG }}" ]] && echo "Latest Tag: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend:latest"
          echo "::endgroup::"

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
      - name: Install kustomize
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG_NEW }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Install yq
        run: |
          sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
      - name: Verify kubectl configuration
        run: kubectl cluster-info
      - name: Set deployment environment variables
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "DEPLOY_NAMESPACE=test" >> $GITHUB_ENV
            echo "API_HOST=test-api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else
            echo "DEPLOY_NAMESPACE=default" >> $GITHUB_ENV
            echo "API_HOST=api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${{ github.head_ref || github.ref_name }}-${{ github.run_number }}" >> $GITHUB_ENV
      - name: Log deployment details
        run: |
          echo "::group::Deployment Details"
          echo "Namespace: ${{ env.DEPLOY_NAMESPACE }}"
          echo "API Host: ${{ env.API_HOST }}"
          echo "Image Tag: ${{ env.IMAGE_TAG }}"
          echo "::endgroup::"
      - name: Cleanup before deployment
        uses: actions/github-script@v6
        with:
          script: |
            const script = require('./.github/scripts/cleanup-cluster.js')
            await script({github, context, core, exec})
      - name: Create namespace if not exists
        run: |
          kubectl create namespace ${{ env.DEPLOY_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -
      - name: Create or update JWT secret
        run: |
          kubectl create secret generic jwt-secret \
            --namespace ${{ env.DEPLOY_NAMESPACE }} \
            --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Create Server TLS Secret
        run: |
          if ! kubectl get secret tls-secret --namespace=${{ env.DEPLOY_NAMESPACE }} >/dev/null 2>&1; then
            kubectl create secret tls tls-secret \
              --cert=<(echo "${{ secrets.SSL_CERT }}") \
              --key=<(echo "${{ secrets.SSL_KEY }}") \
              --namespace=${{ env.DEPLOY_NAMESPACE }};
          else
            echo "Secret tls-secret already exists, skipping creation.";
          fi
      - name: Create PostgreSQL Secret
        run: |
          kubectl create secret generic postgres-secret \
            --namespace=${{ env.DEPLOY_NAMESPACE }} \
            --from-literal=POSTGRES_DB=linguaquiz \
            --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            --dry-run=client -o yaml | kubectl apply -f -
      - name: Wait for PostgreSQL Secret
        run: |
          timeout 30s bash -c 'while ! kubectl get secret postgres-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for PostgreSQL secret..."; sleep 2; done' || (echo "Timed out waiting for PostgreSQL secret" && exit 1)
        shell: bash
      - name: Wait for JWT Secret
        run: |
          timeout 30s bash -c 'while ! kubectl get secret jwt-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for JWT secret..."; sleep 2; done' || (echo "Timed out waiting for JWT secret" && exit 1)
        shell: bash
      - name: Update manifests
        env:
          DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          IMAGE_NAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend
        run: |
          cd packages/backend/k8s
          yq e ".images[0].newName = \"${IMAGE_NAME}\"" -i kustomization.yaml
          yq e ".images[0].newTag = \"${{ env.IMAGE_TAG }}\"" -i kustomization.yaml
          yq e ".metadata.namespace = \"${{ env.DEPLOY_NAMESPACE }}\"" -i deployment.yaml
          yq e ".metadata.namespace = \"${{ env.DEPLOY_NAMESPACE }}\"" -i ingress.yaml
          yq e ".metadata.namespace = \"${{ env.DEPLOY_NAMESPACE }}\"" -i postgres-deployment.yaml
          yq e ".metadata.namespace = \"${{ env.DEPLOY_NAMESPACE }}\"" -i service.yaml
          yq e ".spec.tls[0].hosts[0] = \"${{ env.API_HOST }}\"" -i ingress.yaml
          yq e ".spec.rules[0].host = \"${{ env.API_HOST }}\"" -i ingress.yaml
      - name: Deploy to Kubernetes
        run: |
          cd packages/backend/k8s
          kustomize build | kubectl apply -f -
      - name: Wait for postgres deployment to be ready
        run: |
          kubectl rollout status deployment/postgres -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s
      - name: Wait for app deployment to be ready
        run: |
          kubectl rollout status deployment/lingua-quiz -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s
          sleep 5s
      - name: Log deployment status
        run: |
          echo "::group::Deployment Status"
          echo "Postgres deployment status:"
          kubectl get deployment postgres -n ${{ env.DEPLOY_NAMESPACE }} -o wide
          echo "App deployment status:"
          kubectl get deployment lingua-quiz -n ${{ env.DEPLOY_NAMESPACE }} -o wide
          echo "::endgroup::"
      - name: Run Database Migrations
        run: |
          BACKEND_POD=$(kubectl get pods -l app=lingua-quiz -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.items[0].metadata.name}")
          kubectl exec $BACKEND_POD -n ${{ env.DEPLOY_NAMESPACE }} -- \
            env DB_HOST=postgres \
                DB_PORT=5432 \
                POSTGRES_DB=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_DB}" | base64 --decode) \
                POSTGRES_USER=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_USER}" | base64 --decode) \
                POSTGRES_PASSWORD=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_PASSWORD}" | base64 --decode) \
            npm run migrate
      - name: Log final deployment details
        run: |
          echo "::group::Final Deployment Details"
          echo "Environment: ${{ env.DEPLOY_NAMESPACE == 'default' && 'Production' || 'Test' }}"
          echo "Namespace: ${{ env.DEPLOY_NAMESPACE }}"
          echo "API Host: ${{ env.API_HOST }}"
          echo "Image: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend:${{ env.IMAGE_TAG }}"
          echo "Deployment completed successfully"
          echo "::endgroup::"

  test:
    needs: [deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install dependencies
        run: |
          npm ci
          npm install --save-dev @babel/core @babel/preset-env babel-jest
      - name: Set environment variables
        run: |
          echo "TEST_ENV=test" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "API_URL=https://test-api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else
            echo "API_URL=https://api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi
      - name: Log test environment
        run: |
          echo "::group::Test Environment"
          echo "API URL: ${{ env.API_URL }}"
          echo "Test Environment: ${{ env.TEST_ENV }}"
          echo "Node Environment: ${{ env.NODE_ENV }}"
          echo "::endgroup::"
      - name: Run tests
        env:
          API_URL: ${{ env.API_URL }}
        run: npm run test --workspace=@linguaquiz/backend
      - name: Log test results
        run: |
          echo "::group::Test Results"
          echo "Tests completed. Check above for detailed results."
          echo "::endgroup::"
