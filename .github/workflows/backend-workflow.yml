# .github/workflows/backend-workflow.yml
name: Backend Workflow

on:
  workflow_call:
    secrets:
      # Docker & K8s
      DOCKER_REGISTRY_USERNAME:
        required: true
      DOCKER_REGISTRY_TOKEN:
        required: true
      KUBE_CONFIG:
        required: true
      # App Secrets
      JWT_SECRET:
        required: true
      POSTGRES_DB:
        required: true
      POSTGRES_USER:
        required: true
      POSTGRES_PASSWORD:
        required: true
      # VPS & Nginx Secrets
      VPS_HOST:
        required: true
      VPS_USER:
        required: true
      VPS_SSH_PRIVATE_KEY:
        required: true
      SSL_CERT:
        required: true
      SSL_KEY:
        required: true

permissions:
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      # Use outputs set explicitly by the step below
      image_tag: ${{ steps.set_vars.outputs.image_tag_out }}
      deploy_env: ${{ steps.set_vars.outputs.deploy_env_out }}
      image_name: ${{ steps.set_vars.outputs.image_name_out }} # Output image_name again
      helm_release_name: ${{ steps.set_vars.outputs.helm_release_name_out }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - name: Set variables and outputs
        id: set_vars
        run: |
          DEPLOY_ENV_VAL=$([[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]] && echo "production" || echo "test")
          SAFE_REF_NAME=$(echo "${{ github.head_ref || github.ref_name }}" | sed -e 's/[^a-zA-Z0-9.-]/-/g' | cut -c1-128)
          IMAGE_TAG_VAL=${SAFE_REF_NAME}-${{ github.run_number }}

          if [ -z "${{ secrets.DOCKER_REGISTRY_USERNAME }}" ]; then
            echo "::error::Secret DOCKER_REGISTRY_USERNAME is not set or empty!"
            exit 1
          fi
          IMAGE_NAME_VAL=${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend
          echo "DEBUG: Calculated IMAGE_NAME_VAL is: '${IMAGE_NAME_VAL}'"

          LATEST_TAG_VAL=""
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            LATEST_TAG_VAL=latest
          fi

          # Calculate Helm Release Name here
          if [[ "$DEPLOY_ENV_VAL" == "production" ]]; then
            HELM_RELEASE_NAME_VAL=lingua-quiz-backend
          else
            HELM_RELEASE_NAME_VAL=lingua-quiz-backend-test
          fi
          echo "DEBUG: Calculated HELM_RELEASE_NAME_VAL is: '${HELM_RELEASE_NAME_VAL}'"

          # Set environment variables for subsequent steps in THIS job
          echo "DEPLOY_ENV=${DEPLOY_ENV_VAL}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG_VAL}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${IMAGE_NAME_VAL}" >> $GITHUB_ENV
          echo "LATEST_TAG=${LATEST_TAG_VAL}" >> $GITHUB_ENV

          # Set outputs using $GITHUB_OUTPUT
          echo "Setting outputs using GITHUB_OUTPUT..."
          echo "deploy_env_out=${DEPLOY_ENV_VAL}" >> $GITHUB_OUTPUT
          echo "image_tag_out=${IMAGE_TAG_VAL}" >> $GITHUB_OUTPUT
          echo "image_name_out=${IMAGE_NAME_VAL}" >> $GITHUB_OUTPUT # Set output
          echo "latest_tag_out=${LATEST_TAG_VAL}" >> $GITHUB_OUTPUT
          echo "helm_release_name_out=${HELM_RELEASE_NAME_VAL}" >> $GITHUB_OUTPUT
          echo "Finished setting outputs."

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./packages/backend/Dockerfile
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ env.LATEST_TAG != '' && format('{0}:{1}', env.IMAGE_NAME, env.LATEST_TAG) || '' }}
      - name: Log build details
        run: |
          echo "::group::Build Details"
          echo "Deploy Environment: ${{ steps.set_vars.outputs.deploy_env_out }}"
          echo "Image Name: ${{ steps.set_vars.outputs.image_name_out }}" # Use output
          echo "Image Tag: ${{ steps.set_vars.outputs.image_tag_out }}"
          [[ -n "${{ steps.set_vars.outputs.latest_tag_out }}" ]] && echo "Latest Tag Added: ${{ steps.set_vars.outputs.image_name_out }}:latest"
          echo "::endgroup::"

  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment: ${{ needs.build-and-push.outputs.deploy_env }}
    steps:
      - uses: actions/checkout@v3

      - name: Setup Kubernetes and Helm Tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          helm version

      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Verify kubectl configuration
        run: |
          kubectl cluster-info
          kubectl config current-context

      - name: Set deployment environment variables
        env:
          # Get outputs from the build job
          DEPLOY_ENV_FROM_BUILD: ${{ needs.build-and-push.outputs.deploy_env }}
          IMAGE_TAG_FROM_BUILD: ${{ needs.build-and-push.outputs.image_tag }}
          # IMAGE_NAME_FROM_BUILD: ${{ needs.build-and-push.outputs.image_name }} # Not using this approach anymore
          HELM_RELEASE_NAME_FROM_BUILD: ${{ needs.build-and-push.outputs.helm_release_name }}
        run: |
          # Set variables for subsequent steps in *this* job
          echo "DEPLOY_ENV=${DEPLOY_ENV_FROM_BUILD}" >> $GITHUB_ENV
          echo "IMAGE_TAG=${IMAGE_TAG_FROM_BUILD}" >> $GITHUB_ENV
          echo "HELM_RELEASE_NAME=${HELM_RELEASE_NAME_FROM_BUILD}" >> $GITHUB_ENV

          # === Recalculate IMAGE_NAME here ===
          if [ -z "${{ secrets.DOCKER_REGISTRY_USERNAME }}" ]; then
            echo "::error::Secret DOCKER_REGISTRY_USERNAME is not set or empty in deploy job!"
            exit 1
          fi
          IMAGE_NAME_FOR_HELM_VAL=${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend
          echo "IMAGE_NAME_FOR_HELM=${IMAGE_NAME_FOR_HELM_VAL}" >> $GITHUB_ENV
          echo "DEBUG: Recalculated IMAGE_NAME_FOR_HELM is: ${IMAGE_NAME_FOR_HELM_VAL}"
          # === End Recalculation ===

          # Calculate other variables based on DEPLOY_ENV
          if [[ "$DEPLOY_ENV_FROM_BUILD" == "production" ]]; then
            echo "DEPLOY_NAMESPACE=default" >> $GITHUB_ENV
            echo "DEPLOY_PORT=9000" >> $GITHUB_ENV
            echo "API_HOST=api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else # test environment
            echo "DEPLOY_NAMESPACE=test" >> $GITHUB_ENV
            echo "DEPLOY_PORT=9001" >> $GITHUB_ENV
            echo "API_HOST=test-api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi
          # Calculate POSTGRES_SECRET_NAME using the already set HELM_RELEASE_NAME
          echo "POSTGRES_SECRET_NAME=${HELM_RELEASE_NAME_FROM_BUILD}-postgres" >> $GITHUB_ENV
          echo "DEBUG: POSTGRES_SECRET_NAME set to: ${HELM_RELEASE_NAME_FROM_BUILD}-postgres"

          echo "SSL_CERT_PATH=/etc/nginx/ssl/${API_HOST}.crt" >> $GITHUB_ENV
          echo "SSL_KEY_PATH=/etc/nginx/ssl/${API_HOST}.key" >> $GITHUB_ENV

      - name: DEBUG - Show crucial env vars
        run: |
          echo "Image name set in env for helm (IMAGE_NAME_FOR_HELM): '${{ env.IMAGE_NAME_FOR_HELM }}'"
          echo "Image tag set in env for helm (IMAGE_TAG): '${{ env.IMAGE_TAG }}'"
          echo "Helm Release Name: '${{ env.HELM_RELEASE_NAME }}'"
          echo "Deploy Namespace: '${{ env.DEPLOY_NAMESPACE }}'"
          echo "Postgres Secret Name: '${{ env.POSTGRES_SECRET_NAME }}'"

      - name: Deploy to Kubernetes using Helm
        run: |
          echo "Deploying Helm chart to namespace: ${{ env.DEPLOY_NAMESPACE }}"
          # Use the env vars set in this job
          helm upgrade --install ${{ env.HELM_RELEASE_NAME }} ./packages/backend/helm/lingua-quiz \
            --namespace ${{ env.DEPLOY_NAMESPACE }} \
            --create-namespace \
            --set backend.image.repository=${{ env.IMAGE_NAME_FOR_HELM }} \
            --set backend.image.tag=${{ env.IMAGE_TAG }} \
            --set backend.port=${{ env.DEPLOY_PORT }} \
            --set backend.service.port=${{ env.DEPLOY_PORT }} \
            --set secrets.jwtSecret=${{ secrets.JWT_SECRET }} \
            --set secrets.postgresDb=${{ secrets.POSTGRES_DB }} \
            --set secrets.postgresUser=${{ secrets.POSTGRES_USER }} \
            --set secrets.postgresPassword=${{ secrets.POSTGRES_PASSWORD }} \
            --wait --timeout 5m0s

      - name: Run Migrations
        run: |
          echo "Waiting a few seconds before running migrations..."
          sleep 10
          echo "Running database migrations..."
          BACKEND_POD=$(kubectl get pods -l app.kubernetes.io/instance=${{ env.HELM_RELEASE_NAME }} -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" 2>/dev/null)
          if [[ -z "$BACKEND_POD" ]]; then
             echo "::error::Could not find backend pod to run migrations."
             exit 1
          fi
          echo "Found backend pod: $BACKEND_POD"

          # Use the env var POSTGRES_SECRET_NAME directly
          POSTGRES_SECRET_VAR_NAME="${{ env.POSTGRES_SECRET_NAME }}"
          echo "DEBUG: Using postgres secret name: '$POSTGRES_SECRET_VAR_NAME'"

          DB_NAME=$(kubectl get secret "$POSTGRES_SECRET_VAR_NAME" -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_DB}" | base64 --decode)
          DB_USER=$(kubectl get secret "$POSTGRES_SECRET_VAR_NAME" -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_USER}" | base64 --decode)
          DB_PASS=$(kubectl get secret "$POSTGRES_SECRET_VAR_NAME" -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_PASSWORD}" | base64 --decode)
          DB_HOST_VALUE="${{ env.HELM_RELEASE_NAME }}-postgres"

          if [ -z "$DB_NAME" ]; then echo "::error::Failed to get DB_NAME from secret '$POSTGRES_SECRET_VAR_NAME'"; exit 1; fi
          if [ -z "$DB_USER" ]; then echo "::error::Failed to get DB_USER from secret '$POSTGRES_SECRET_VAR_NAME'"; exit 1; fi
          if [ -z "$DB_PASS" ]; then echo "::error::Failed to get DB_PASS from secret '$POSTGRES_SECRET_VAR_NAME'"; exit 1; fi
          echo "DEBUG: DB_HOST=${DB_HOST_VALUE}, DB_PORT=5432, POSTGRES_DB=${DB_NAME}, POSTGRES_USER=${DB_USER}, POSTGRES_PASSWORD length: ${#DB_PASS}"

          # Execute migration command with export
          echo "Executing migration command..."
          kubectl exec $BACKEND_POD -n ${{ env.DEPLOY_NAMESPACE }} -- \
            sh -c "export DB_HOST='${DB_HOST_VALUE}' && \
                   export DB_PORT='5432' && \
                   export POSTGRES_DB='${DB_NAME}' && \
                   export POSTGRES_USER='${DB_USER}' && \
                   export POSTGRES_PASSWORD='${DB_PASS}' && \
                   echo '--- Running npm run migrate inside pod ---' && \
                   npm run migrate && \
                   echo '--- npm run migrate finished ---'"
          echo "Migrations command execution attempt finished."

      - name: Configure Nginx on VPS
        # This step remains unchanged
        uses: appleboy/ssh-action@v1.0.3
        env:
          API_HOST_ENV: ${{ env.API_HOST }}
          DEPLOY_PORT_ENV: ${{ env.DEPLOY_PORT }}
          SSL_CERT_PATH_ENV: ${{ env.SSL_CERT_PATH }}
          SSL_KEY_PATH_ENV: ${{ env.SSL_KEY_PATH }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          envs: API_HOST_ENV, DEPLOY_PORT_ENV, SSL_CERT_PATH_ENV, SSL_KEY_PATH_ENV
          script: |
            # ... (скрипт Nginx остается без изменений) ...
            echo "Configuring Nginx for ${API_HOST_ENV} proxying to ${DEPLOY_PORT_ENV}"
            sudo mkdir -p /etc/nginx/ssl
            sudo chmod 700 /etc/nginx/ssl
            echo "Writing SSL certificate to ${SSL_CERT_PATH_ENV}"
            echo "${{ secrets.SSL_CERT }}" | sudo tee "${SSL_CERT_PATH_ENV}" > /dev/null
            echo "Writing SSL key to ${SSL_KEY_PATH_ENV}"
            echo "${{ secrets.SSL_KEY }}" | sudo tee "${SSL_KEY_PATH_ENV}" > /dev/null
            echo "Setting permissions for SSL key"
            sudo chmod 600 "${SSL_KEY_PATH_ENV}"
            NGINX_CONF_PATH="/etc/nginx/sites-available/${API_HOST_ENV}.conf"
            echo "Creating Nginx config at ${NGINX_CONF_PATH}"
            cat <<EOF | sudo tee "${NGINX_CONF_PATH}" > /dev/null
            server {
                listen 443 ssl http2;
                listen [::]:443 ssl http2;
                server_name ${API_HOST_ENV};

                ssl_certificate ${SSL_CERT_PATH_ENV};
                ssl_certificate_key ${SSL_KEY_PATH_ENV};

                ssl_protocols TLSv1.2 TLSv1.3;
                ssl_prefer_server_ciphers off;
                ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
                ssl_session_cache shared:SSL:10m;
                ssl_session_timeout 1d;
                ssl_session_tickets off;

                access_log /var/log/nginx/${API_HOST_ENV}.access.log;
                error_log /var/log/nginx/${API_HOST_ENV}.error.log;

                location / {
                    proxy_pass http://127.0.0.1:${DEPLOY_PORT_ENV};
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_set_header X-Forwarded-Host \$host;
                    proxy_set_header X-Forwarded-Port \$server_port;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection "upgrade";
                    proxy_connect_timeout 60s;
                    proxy_send_timeout 60s;
                    proxy_read_timeout 60s;
                }
            }
            EOF
            echo "Enabling Nginx site"
            sudo ln -sf "${NGINX_CONF_PATH}" "/etc/nginx/sites-enabled/"
            echo "Testing Nginx configuration"
            if sudo nginx -t; then
              echo "Reloading Nginx"
              sudo systemctl reload nginx
            else
              echo "::error::Nginx configuration test failed! Check the Nginx error log on the server."
              exit 1
            fi
            echo "Nginx configuration for ${API_HOST_ENV} updated successfully."

      - name: Log deployment status
        run: |
          echo "::group::Deployment Status"
          echo "Deploy Environment: ${{ env.DEPLOY_ENV }}"
          echo "Helm Release: ${{ env.HELM_RELEASE_NAME }}"
          echo "Namespace: ${{ env.DEPLOY_NAMESPACE }}"
          echo "Target Port (backend service): ${{ env.DEPLOY_PORT }}"
          echo "API Host (Nginx Server Name): ${{ env.API_HOST }}"
          echo "Image: ${{ env.IMAGE_NAME_FOR_HELM }}:${{ env.IMAGE_TAG }}" # Use env var
          echo "Deployment to Kubernetes completed."
          echo "Nginx configuration on VPS updated."
          echo "::endgroup::"

  test:
    needs: [build-and-push, deploy]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Set environment variables for tests
        env:
          DEPLOY_ENV_FROM_BUILD: ${{ needs.build-and-push.outputs.deploy_env }}
        run: |
          echo "NODE_ENV=test" >> $GITHUB_ENV
          if [[ "$DEPLOY_ENV_FROM_BUILD" == "production" ]]; then
            echo "API_URL=https://api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else
            echo "API_URL=https://test-api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi
      - name: Run backend tests
        env:
          API_URL: ${{ env.API_URL }}
        run: |
          echo "Running tests against URL: ${API_URL}"
          npm run test --workspace=@linguaquiz/backend
          echo "::group::Test Results"
          echo "Tests completed. Check test runner output above for details."
          echo "::endgroup::"
