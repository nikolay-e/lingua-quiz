name: CI/CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Check dependencies
        run: npm run depcheck
        
      - name: Run core package tests
        run: |
          cd packages/core
          npm test
        
      - name: Start test environment
        run: docker compose up --build -d db backend frontend
        
      - name: Wait for services to be ready
        run: timeout 60 bash -c 'until curl -f http://localhost:8080 > /dev/null 2>&1; do sleep 1; done'
        
      - name: Run backend integration tests (no TTS)
        run: |
          cd packages/backend
          pip install -r requirements.txt
          SKIP_TTS_TESTS=true API_URL=http://localhost:9000/api python test_integration.py
                    
      - name: Run E2E tests
        run: docker compose run --build --rm e2e-tests

  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - context: ./packages/backend
            dockerfile: Dockerfile
            image: lingua-quiz-backend
          - context: .
            dockerfile: ./packages/frontend/Dockerfile
            image: lingua-quiz-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/${{ matrix.image }}:${{ github.event.pull_request.head.sha || github.sha }},${{ secrets.DOCKER_REGISTRY_USERNAME }}/${{ matrix.image }}:latest

  deploy:
    needs: [test, build-images]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'lingua-quiz-production' || 'lingua-quiz-staging' }}
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl and Helm
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Create TLS Secret
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret tls lingua-quiz-tls \
            --cert=<(echo "${{ secrets.SSL_CERT }}" | base64 -d) \
            --key=<(echo "${{ secrets.SSL_KEY }}" | base64 -d) \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Deploy with Helm
        id: helm-deploy
        continue-on-error: true
        run: |
          # Uninstall existing release if it exists to avoid "operation in progress" errors
          helm uninstall lingua-quiz --namespace $NAMESPACE || true
          
          # Wait a moment for cleanup
          sleep 10
          
          IMAGE_TAG="${{ github.event.pull_request.head.sha || github.sha }}"
          echo "Deploying with image tag: $IMAGE_TAG"
          helm upgrade --install lingua-quiz ./helm/lingua-quiz-app \
            --namespace $NAMESPACE \
            --set namespace=$NAMESPACE \
            --set backend.image.repository=${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backend \
            --set backend.image.tag=$IMAGE_TAG \
            --set frontend.image.repository=${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-frontend \
            --set frontend.image.tag=$IMAGE_TAG \
            --set ingress.frontend.host=${{ github.ref == 'refs/heads/main' && 'lingua-quiz.nikolay-eremeev.com' || 'test-lingua-quiz.nikolay-eremeev.com' }} \
            --set secrets.jwtSecret="${{ secrets.JWT_SECRET }}" \
            --set secrets.postgresDb="${{ secrets.POSTGRES_DB }}" \
            --set secrets.postgresUser="${{ secrets.POSTGRES_USER }}" \
            --set secrets.postgresPassword="${{ secrets.POSTGRES_PASSWORD }}" \
            --set secrets.googleCloudCredentialsB64="${{ secrets.GOOGLE_CLOUD_CREDENTIALS_B64 }}" \
            --wait --timeout 5m
            
      - name: Check Migration Logs
        if: always()
        run: |
          echo "Checking for migration job..."
          # Give it a moment for the job to be created
          sleep 5
          
          # Check if migration job exists
          if kubectl get job lingua-quiz-migrations -n $NAMESPACE 2>/dev/null; then
            echo "Migration job found. Waiting for completion..."
            kubectl wait --for=condition=complete \
              job/lingua-quiz-migrations \
              -n $NAMESPACE \
              --timeout=5m || {
                echo "Migration job did not complete successfully."
              }
            
            echo ""
            echo "=== Migration Job Status ==="
            kubectl describe job/lingua-quiz-migrations -n $NAMESPACE || true
            
            echo ""
            echo "=== Migration Logs ==="
            kubectl logs job/lingua-quiz-migrations -n $NAMESPACE --all-containers=true || true
            
            # Check if job failed
            if kubectl get job lingua-quiz-migrations -n $NAMESPACE -o jsonpath='{.status.failed}' | grep -q "1"; then
              echo "Migration job failed!"
              exit 1
            fi
          else
            echo "Migration job not found. Helm deployment may have failed."
          fi
          
      - name: Check Deployment Status
        if: steps.helm-deploy.outcome == 'failure'
        run: |
          echo "Helm deployment failed. Checking status..."
          kubectl get all -n $NAMESPACE
          exit 1

  test-api:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      API_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com/api' || 'https://test-lingua-quiz.nikolay-eremeev.com/api' }}
    steps:
      - uses: actions/checkout@v4
      - name: Test deployed API
        run: |
          cd packages/backend
          pip install -r requirements.txt
          python test_integration.py

  test-e2e-deployed:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      LINGUA_QUIZ_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com' || 'https://test-lingua-quiz.nikolay-eremeev.com' }}
      API_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com/api' || 'https://test-lingua-quiz.nikolay-eremeev.com/api' }}
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t e2e-tests -f ./packages/e2e-tests/Dockerfile .
      - run: docker run --rm -e LINGUA_QUIZ_URL -e API_URL e2e-tests playwright test