name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    # Add permissions to write to GHCR
    permissions:
      contents: read
      packages: write # Grant permission to push to GitHub Packages (GHCR)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Docker Buildx
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry (GHCR)
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }} # Use GITHUB_TOKEN for secure auth

      # Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}/lingua-quiz
          # Generates tags: type=sha, type=ref (e.g., branch name)
          tags: |
            type=sha,prefix=
            type=ref,event=branch
            type=ref,event=pr

      # Build and push backend image with cache
      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: backend
          push: true
          tags: ghcr.io/${{ github.repository }}/lingua-quiz-backend:${{ github.event.pull_request.head.sha || github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # This is the key for caching
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-backend:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-backend:cache,mode=max

      # Build and push frontend image with cache
      - name: Build and push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: frontend
          push: true
          tags: ghcr.io/${{ github.repository }}/lingua-quiz-frontend:${{ github.event.pull_request.head.sha || github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # This is the key for caching
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-frontend:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-frontend:cache,mode=max

      # Build and push integration tests image with cache
      - name: Build and push integration tests image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: integration-e2e-tests
          push: true
          tags: ghcr.io/${{ github.repository }}/lingua-quiz-integration-e2e-tests:${{ github.event.pull_request.head.sha || github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          # This is the key for caching
          cache-from: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-integration-e2e-tests:cache
          cache-to: type=registry,ref=ghcr.io/${{ github.repository }}/lingua-quiz-integration-e2e-tests:cache,mode=max

      # Setup Helm
      - name: Setup Helm
        uses: azure/setup-helm@v4
        with:
          version: 'v3.15.4' # Pin to specific version

      # Setup kubectl
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.30.0' # Pin to specific version

      # Setup SOPS
      - name: Setup SOPS
        uses: mdgreenwald/mozilla-sops-action@v1.6.0
        with:
          version: '3.10.2' # Pin to specific version

      # Configure kubeconfig
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          cat << 'EOF' > $HOME/.kube/config
          ${{ secrets.KUBE_CONFIG }}
          EOF
          chmod 600 $HOME/.kube/config

      # Setup SOPS with age key
      - name: Setup SOPS with age key
        run: |
          echo "${{ secrets.AGE_PRIVATE_KEY }}" > .age-key.txt
          chmod 600 .age-key.txt

      # Create GHCR secret in target namespace
      - name: Create GHCR secret
        run: |
          # Determine target namespace based on environment
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            NAMESPACE="lingua-quiz-production"
          else
            NAMESPACE="lingua-quiz-staging"
          fi

          echo "Creating GHCR secret in namespace: $NAMESPACE"

          # Create namespace if it doesn't exist
          kubectl create namespace "$NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

          # Delete existing secret if it exists (to update credentials)
          kubectl delete secret ghcr-secret -n "$NAMESPACE" || true

          # Create new GHCR secret
          kubectl create secret docker-registry ghcr-secret \
            --docker-server=ghcr.io \
            --docker-username=${{ github.repository_owner }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --docker-email=noreply@github.com \
            -n "$NAMESPACE"

      # Deploy with Makefile, now using GHCR images
      - name: Deploy with Makefile
        id: helm-deploy
        continue-on-error: true
        run: |
          IMAGE_TAG="${{ github.event.pull_request.head.sha || github.sha }}"
          echo "Deploying with image tag: $IMAGE_TAG"

          # Debug: Show current releases
          echo "Listing all Helm releases:"
          helm list -A || true

          # Debug: Validate chart before installation
          echo "Validating Helm chart..."
          helm lint ./helm/lingua-quiz-app || true

          # Clean and deploy using Makefile with GHCR registry
          if [ "${{ github.event_name }}" == "push" ] && [ "${{ github.ref }}" == "refs/heads/main" ]; then
            echo "Cleaning and deploying to production..."
            make clean-prod
            make prod IMAGE_TAG="$IMAGE_TAG" REGISTRY="ghcr.io/${{ github.repository }}"
          else
            echo "Cleaning and deploying to staging..."
            make clean-staging
            make staging IMAGE_TAG="$IMAGE_TAG" REGISTRY="ghcr.io/${{ github.repository }}"
          fi
