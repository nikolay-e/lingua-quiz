##
## LinguaQuiz – Copyright © 2025 Nikolay Eremeev
##
## Dual-licensed:
##  – Non-Commercial Source-Available v2  →  see LICENSE-NONCOMMERCIAL.md
##  – Commercial License v2              →  see LICENSE-COMMERCIAL.md
##
## Contact: lingua-quiz@nikolay-eremeev.com
## Repository: https://github.com/nikolay-e/lingua-quiz
##
name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  statuses: write
  security-events: write
  actions: write # Needed for upload-artifact in E2E job

jobs:
  # Run all tests (unit, integration, component, e2e)
  run-tests:
    name: Run Tests
    uses: ./.github/workflows/testing.yml
    with:
      test-type: all
      node-version: "22"

  # --- K8s Deployment Section ---
  prepare-secrets:
    uses: ./.github/workflows/secrets.yml
    secrets:
      SSL_CERT: ${{ secrets.SSL_CERT }}
      SSL_KEY: ${{ secrets.SSL_KEY }}
      KUBE_CONFIG: ${{ secrets.KUBE_CONFIG }}

  create-tls-secrets:
    name: Create/Update Kubernetes TLS Secrets
    runs-on: ubuntu-latest
    needs: [prepare-secrets]
    steps:
      - name: Setup Kubernetes Tools
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
      - name: Set up kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ needs.prepare-secrets.outputs.kube_config }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
      - name: Prepare Cert Files from Outputs
        run: |
          echo "${{ needs.prepare-secrets.outputs.ssl_cert }}" > tls.crt
          echo "${{ needs.prepare-secrets.outputs.ssl_key }}" > tls.key
          echo "Certificate and key files created from outputs."
          echo "Cert content (first 80 chars):"
          head -c 80 tls.crt ; echo
          echo "Key content (first 80 chars):"
          head -c 80 tls.key ; echo
      - name: Create/Update Secrets in Namespaces
        run: |
          for ns in default test; do
            echo "--- Processing namespace: $ns ---"
            kubectl create namespace $ns || echo "Namespace $ns already exists or cannot be created, continuing..."

            # Secret for Frontend (used by frontend Ingress)
            kubectl create secret tls lingua-quiz-frontend-tls \
              --namespace $ns \
              --cert=tls.crt \
              --key=tls.key \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "Applied secret lingua-quiz-frontend-tls in $ns"

            # Secret for Backend (used by backend Ingress)
            kubectl create secret tls lingua-quiz-backend-tls \
              --namespace $ns \
              --cert=tls.crt \
              --key=tls.key \
              --dry-run=client -o yaml | kubectl apply -f -
            echo "Applied secret lingua-quiz-backend-tls in $ns"
          done
      - name: Cleanup Cert Files
        if: always()
        run: rm -f tls.crt tls.key

  build-backup-image:
    name: Build Backup Image # Kept as is from old.txt
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.meta.outputs.version }}
      image_name: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - name: Docker meta for backup image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_REGISTRY_USERNAME }}/lingua-quiz-backup
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=,suffix=,format=short
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push backup image
        uses: docker/build-push-action@v5
        with:
          context: ./packages/backend
          file: ./packages/backend/docker/backup/Dockerfile
          push: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  frontend:
    name: Build and Deploy Frontend (K8s)
    needs: [run-tests, prepare-secrets, create-tls-secrets] # Updated to depend on run-tests instead of common-tests
    uses: ./.github/workflows/frontend-workflow.yml
    secrets:
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      KUBE_CONFIG: ${{ needs.prepare-secrets.outputs.kube_config }}

  backend:
    name: Build, Deploy and Test Backend (K8s)
    needs: [run-tests, prepare-secrets, create-tls-secrets] # Updated to depend on run-tests instead of common-tests
    uses: ./.github/workflows/backend-workflow.yml
    permissions:
      contents: read
    secrets:
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      KUBE_CONFIG: ${{ needs.prepare-secrets.outputs.kube_config }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

  security-scans:
    name: Security Scans (ZAP)
    needs: [frontend, backend] # Depends on K8s deployments
    if: ${{ !contains(needs.*.result, 'failure') && !contains(needs.*.result, 'skipped') }}
    uses: ./.github/workflows/security-scans.yml
    permissions: # Permissions needed by the security scan workflow
      contents: read
      issues: write
      security-events: write
      pull-requests: write
    with:
      frontend-url: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com' || 'https://test-lingua-quiz.nikolay-eremeev.com' }}
      backend-url: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'https://api-lingua-quiz.nikolay-eremeev.com' || 'https://test-api-lingua-quiz.nikolay-eremeev.com' }}
