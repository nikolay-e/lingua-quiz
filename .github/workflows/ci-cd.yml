name: CI/CD

on:
  push:
    branches: [main]
  pull_request:

jobs:
  setup:
    permissions:
      contents: read
    uses: ./.github/workflows/reusable-nodejs-setup.yml

  test-suite:
    needs: setup
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Linting, Depcheck & Unit Tests
            run_script: |
              npm run lint
              npm run depcheck
              cd packages/core && npm test
          - name: Backend Integration Tests
            run_script: |
              docker compose up --build -d db backend
              timeout 60 bash -c 'until curl -f http://localhost:9000/api/health > /dev/null 2>&1; do sleep 1; done'
              cd packages/backend
              pip install -r requirements.txt
              SKIP_TTS_TESTS=true API_URL=http://localhost:9000/api python test_integration.py
          - name: E2E Tests
            run_script: |
              docker compose up --build -d db backend frontend
              timeout 60 bash -c 'until curl -f http://localhost:8080 > /dev/null 2>&1; do sleep 1; done'
              docker compose run --build --rm e2e-tests
    steps:
      - name: Download workspace archive
        uses: actions/download-artifact@v4
        with:
          name: workspace-archive
          path: .
      
      - name: Extract workspace
        run: tar -xzf workspace.tar.gz
        
      - name: Run ${{ matrix.name }}
        run: ${{ matrix.run_script }}

  build-images:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    strategy:
      matrix:
        include:
          - context: ./packages/backend
            dockerfile: Dockerfile
            image: lingua-quiz-backend
          - context: .
            dockerfile: ./packages/frontend/Dockerfile
            image: lingua-quiz-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: nikolajer
          password: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      - uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: true
          tags: nikolajer/${{ matrix.image }}:${{ github.event.pull_request.head.sha || github.sha }},nikolajer/${{ matrix.image }}:latest

  deploy:
    needs: [test-suite, build-images]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    permissions:
      contents: read
    env:
      NAMESPACE: ${{ github.ref == 'refs/heads/main' && 'lingua-quiz-production' || 'lingua-quiz-staging' }}
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup kubectl and Helm
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          
      - name: Configure kubeconfig
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBE_CONFIG }}" | base64 -d > $HOME/.kube/config
          chmod 600 $HOME/.kube/config
          
      - name: Create TLS Secret
        run: |
          kubectl create namespace $NAMESPACE --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret tls lingua-quiz-tls \
            --cert=<(echo "${{ secrets.SSL_CERT }}" | base64 -d) \
            --key=<(echo "${{ secrets.SSL_KEY }}" | base64 -d) \
            --namespace=$NAMESPACE \
            --dry-run=client -o yaml | kubectl apply -f -
            
      - name: Deploy with Helm
        id: helm-deploy
        continue-on-error: true
        run: |
          # Uninstall existing release if it exists to avoid "operation in progress" errors
          helm uninstall lingua-quiz --namespace $NAMESPACE || true
          
          # Wait a moment for cleanup
          sleep 10
          
          IMAGE_TAG="${{ github.event.pull_request.head.sha || github.sha }}"
          VALUES_FILE="values-$ENVIRONMENT.yaml"
          echo "Deploying with image tag: $IMAGE_TAG using $VALUES_FILE"
          
          helm upgrade --install lingua-quiz ./helm/lingua-quiz-app \
            --namespace $NAMESPACE \
            --set namespace=$NAMESPACE \
            --set backend.image.repository=nikolajer/lingua-quiz-backend \
            --set backend.image.tag=$IMAGE_TAG \
            --set frontend.image.repository=nikolajer/lingua-quiz-frontend \
            --set frontend.image.tag=$IMAGE_TAG \
            --set secrets.secrets.jwtSecret=="${{ secrets.JWT_PRIMARY_SECRET }}" \
            --set secrets.postgresDb="lingua-quiz" \
            --set secrets.postgresUser="${{ secrets.POSTGRES_USER }}" \
            --set secrets.postgresPassword="${{ secrets.POSTGRES_PASSWORD }}" \
            --set secrets.googleCloudCredentialsB64="${{ secrets.GOOGLE_CLOUD_CREDENTIALS_B64 }}" \
            --wait --timeout 5m
            
      - name: Check Migration Logs
        if: always()
        run: ./.github/scripts/check-migration-status.sh $NAMESPACE
          
      - name: Check Deployment Status
        if: steps.helm-deploy.outcome == 'failure'
        run: |
          echo "Helm deployment failed. Checking status..."
          kubectl get all -n $NAMESPACE
          exit 1

  test-api:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      API_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com/api' || 'https://test-lingua-quiz.nikolay-eremeev.com/api' }}
    steps:
      - uses: actions/checkout@v4
      - name: Test deployed API
        run: |
          cd packages/backend
          pip install -r requirements.txt
          python test_integration.py

  test-e2e-deployed:
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      LINGUA_QUIZ_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com' || 'https://test-lingua-quiz.nikolay-eremeev.com' }}
      API_URL: ${{ github.ref == 'refs/heads/main' && 'https://lingua-quiz.nikolay-eremeev.com/api' || 'https://test-lingua-quiz.nikolay-eremeev.com/api' }}
    steps:
      - uses: actions/checkout@v4
      - run: docker build -t e2e-tests -f ./packages/e2e-tests/Dockerfile .
      - run: docker run --rm -e LINGUA_QUIZ_URL -e API_URL e2e-tests playwright test