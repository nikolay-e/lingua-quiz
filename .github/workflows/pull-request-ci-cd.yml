name: Pull Request CI/CD

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:

jobs:
  depcheck:
    name: Depcheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Run depcheck
        run: npm run depcheck
      - name: Log depcheck results
        run: |
          echo "::group::Depcheck Results"
          echo "Depcheck completed. Check above for detailed results."
          echo "::endgroup::"

  eslint:
    name: ESLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Run ESLint
        run: npm run lint
      - name: Log ESLint results
        run: |
          echo "::group::ESLint Results"
          echo "ESLint completed. Check above for detailed results."
          echo "::endgroup::"

  frontend-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test --workspace=@linguaquiz/frontend
      - name: Log frontend test results
        run: |
          echo "::group::Frontend Test Results"
          echo "Frontend tests completed. Check above for detailed results."
          echo "::endgroup::"

  frontend:
    needs: [frontend-tests]
    uses: nikolay-e/reusable-workflows/.github/workflows/docker-build-deploy-vps.yml@main
    with:
      image_name:
        ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'lingua-quiz-com' ||
        'test-lingua-quiz-com' }}
      container_port:
        ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 8444 || 8445 }}
      domain:
        ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' &&
        'lingua-quiz.nikolay-eremeev.com' || 'test-lingua-quiz.nikolay-eremeev.com' }}
      docker_context: packages/frontend
      docker_file: packages/frontend/Dockerfile
    secrets:
      DOCKER_REGISTRY_USERNAME: ${{ secrets.DOCKER_REGISTRY_USERNAME }}
      DOCKER_REGISTRY_TOKEN: ${{ secrets.DOCKER_REGISTRY_TOKEN }}
      VPS_SSH_PRIVATE_KEY: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
      VPS_HOST: ${{ secrets.VPS_HOST }}
      VPS_USER: ${{ secrets.VPS_USER }}
      SSL_CERT: ${{ secrets.SSL_CERT }}
      SSL_KEY: ${{ secrets.SSL_KEY }}

  backend:
    uses: ./.github/workflows/backend-workflow.yml
    secrets: inherit

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      - name: Install dependencies
        run: |
          npm ci
          npx playwright install-deps
          npx playwright install

      - name: Set environment variables
        run: |
          echo "TEST_ENV=test" >> $GITHUB_ENV
          echo "NODE_ENV=production" >> $GITHUB_ENV
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "LINGUA_QUIZ_URL=https://test-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else
            echo "LINGUA_QUIZ_URL=https://lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi

      - name: Log E2E test environment
        run: |
          echo "::group::E2E Test Environment"
          echo "LINGUA_QUIZ_URL: ${{ env.LINGUA_QUIZ_URL }}"
          echo "TEST_ENV: ${{ env.TEST_ENV }}"
          echo "NODE_ENV: ${{ env.NODE_ENV }}"
          echo "::endgroup::"

      - name: Run E2E Tests
        id: run_e2e_tests
        env:
          LINGUA_QUIZ_URL: ${{ env.LINGUA_QUIZ_URL }}
        run: npm run test --workspace=@linguaquiz/e2e-tests
        continue-on-error: true

      - name: Upload Playwright Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: packages/e2e-tests/playwright-report

      - name: Fail job if tests failed
        if: steps.run_e2e_tests.outcome == 'failure'
        run: exit 1

      - name: Log E2E test results
        run: |
          echo "::group::E2E Test Results"
          echo "E2E tests completed. Check above for detailed results."
          echo "::endgroup::"

  zap-security-scan:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    steps:
      - name: Set ZAP Scan Target URLs
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            echo "ZAP_FRONTEND_URL=https://test-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
            echo "ZAP_BACKEND_URL=https://test-api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          else
            echo "ZAP_FRONTEND_URL=https://lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
            echo "ZAP_BACKEND_URL=https://api-lingua-quiz.nikolay-eremeev.com" >> $GITHUB_ENV
          fi

      - name: Run ZAP Full Scan (Frontend)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: ${{ env.ZAP_FRONTEND_URL }}
          cmd_options: "-a"
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          rules_file_name: ".zap/rules.tsv"
          allow_issue_writing: true
          issue_title: "ZAP Security Scan Report (Frontend)"
          fail_action: false
          artifact_name: "zap_frontend_scan_report"

      - name: Rename Frontend Report
        run: mv report_html.html zap-frontend-report.html || echo "No frontend report found"

      - name: Run ZAP Full Scan (Backend API)
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: ${{ env.ZAP_BACKEND_URL }}
          cmd_options: "-a"
          docker_name: "ghcr.io/zaproxy/zaproxy:stable"
          rules_file_name: ".zap/api-rules.tsv"
          allow_issue_writing: true
          issue_title: "ZAP Security Scan Report (API)"
          fail_action: false
          artifact_name: "zap_backend_scan_report"

      - name: Rename Backend Report
        run: mv report_html.html zap-backend-report.html || echo "No backend report found"

      - name: List Files Before Uploading Artifacts
        run: ls -lah

      - name: Upload ZAP Scan Reports
        uses: actions/upload-artifact@v4
        with:
          name: zap_scan_reports
          path: |
            zap-frontend-report.html
            zap-backend-report.html
