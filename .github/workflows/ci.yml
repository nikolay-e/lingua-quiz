name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  REGISTRY: ghcr.io/${{ github.repository }}

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'
          cache-dependency-path: |
            .pre-commit-config.yaml

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - run: npm ci --prefer-offline

      - uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            pre-commit-${{ runner.os }}-

      - run: pip install --no-cache-dir pre-commit isort

      - run: pre-commit run --all-files --show-diff-on-failure --color=always

  build:
    runs-on: ubuntu-latest
    needs: pre-commit
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        service: [backend, frontend, integration-e2e-tests]

    steps:
      - uses: actions/checkout@v5

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ matrix.service }}
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/lingua-quiz-${{ matrix.service }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/lingua-quiz-${{ matrix.service }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Push image
        uses: docker/build-push-action@v6
        with:
          context: .
          target: ${{ matrix.service }}
          push: true
          tags: ${{ env.REGISTRY }}/lingua-quiz-${{ matrix.service }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha

  test:
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 15
    permissions:
      contents: read
    env:
      CI: true
      IMAGE_TAG: ${{ github.event.pull_request.head.sha || github.sha }}

    steps:
      - uses: actions/checkout@v5

      - uses: docker/login-action@v3.6.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and tag images
        run: |
          # Pull images in parallel (using SHA tag for testing)
          docker pull ${{ env.REGISTRY }}/lingua-quiz-backend:${{ env.IMAGE_TAG }} &
          docker pull ${{ env.REGISTRY }}/lingua-quiz-frontend:${{ env.IMAGE_TAG }} &
          docker pull ${{ env.REGISTRY }}/lingua-quiz-integration-e2e-tests:${{ env.IMAGE_TAG }} &
          wait

          # Tag for docker-compose
          docker tag ${{ env.REGISTRY }}/lingua-quiz-backend:${{ env.IMAGE_TAG }} lingua-quiz-backend:latest
          docker tag ${{ env.REGISTRY }}/lingua-quiz-frontend:${{ env.IMAGE_TAG }} lingua-quiz-frontend:latest
          docker tag ${{ env.REGISTRY }}/lingua-quiz-integration-e2e-tests:${{ env.IMAGE_TAG }} lingua-quiz-integration-e2e-tests:latest

      - name: Run tests
        run: |
          mkdir -p test-reports
          chmod 777 test-reports
          docker compose -f docker-compose.test.yml up --abort-on-container-exit --exit-code-from tests

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.run_id }}
          path: test-reports/
          retention-days: 1
          compression-level: 6

      - name: Cleanup
        if: always()
        run: docker compose -f docker-compose.test.yml down -v
