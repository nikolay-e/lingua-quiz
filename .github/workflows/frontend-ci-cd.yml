name: Frontend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'packages/frontend/**'
      - '.github/workflows/frontend*.yml'
  pull_request:
    paths:
      - 'packages/frontend/**'
      - '.github/workflows/frontend*.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set build environment
        run: |
          if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "BUILD_ENV=prod" >> $GITHUB_ENV
          else
            echo "BUILD_ENV=test" >> $GITHUB_ENV
          fi

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: packages/frontend
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:${{ github.head_ref || github.ref_name }}-${{ github.run_number }}
          build-args: |
            BUILD_ENV=${{ env.BUILD_ENV }}

  prepare-vps:
    runs-on: ubuntu-latest
    needs: [build-and-push]

    steps:
      - name: Prepare VPS
        env:
          PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          HOST: ${{ secrets.SERVER_IP }}
          USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} '
            # Update package list and upgrade non-interactively
            sudo DEBIAN_FRONTEND=noninteractive apt-get update
            sudo DEBIAN_FRONTEND=noninteractive apt-get upgrade -y -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold"

            # Install essential packages
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y curl git

            # Install Docker if not already installed
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
              sudo usermod -aG docker $USER
            fi

            # Ensure Docker service is running and enabled
            sudo systemctl start docker
            sudo systemctl enable docker

            # Install Docker Compose if not already installed
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi

            # Set up firewall (ufw) if not already configured
            if ! sudo ufw status | grep -q "Status: active"; then
              sudo DEBIAN_FRONTEND=noninteractive apt-get install -y ufw
              sudo ufw default deny incoming
              sudo ufw default allow outgoing
              sudo ufw allow ssh
              sudo ufw allow http
              sudo ufw allow https
              echo "y" | sudo ufw enable
            fi

            # Print system info
            echo "System updated and Docker installation checked"
            uname -a
            docker --version
            docker-compose --version
            sudo ufw status
          '

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push, prepare-vps]
    steps:
      - name: Deploy to VPS
        env:
          PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          HOST: ${{ secrets.SERVER_IP }}
          USER: ${{ secrets.SERVER_USER }}
          SSL_CERT: ${{ secrets.SSL_CERT }}
          SSL_KEY: ${{ secrets.SSL_KEY }}
          HTTPS_PORT: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && '443' || '8443' }}
          NODE_ENV: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && 'production' || 'development' }}
          IMAGE_NAME: ${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-frontend:${{ github.head_ref || github.ref_name }}-${{ github.run_number }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key

          # Create temporary files for SSL cert and key
          echo "$SSL_CERT" > cert.pem
          echo "$SSL_KEY" > key.pem

          # Transfer SSL certificates
          scp -i private_key -o StrictHostKeyChecking=no cert.pem ${USER}@${HOST}:/tmp/cert.pem
          scp -i private_key -o StrictHostKeyChecking=no key.pem ${USER}@${HOST}:/tmp/key.pem

          # Remove temporary files
          rm cert.pem key.pem

          ssh -o StrictHostKeyChecking=no -i private_key ${USER}@${HOST} "
            # Move SSL certificates to appropriate location
            sudo mkdir -p /etc/nginx/ssl
            sudo mv /tmp/cert.pem /etc/nginx/ssl/cert.pem
            sudo mv /tmp/key.pem /etc/nginx/ssl/key.pem
            sudo chmod 600 /etc/nginx/ssl/cert.pem /etc/nginx/ssl/key.pem
            
            echo \"Using image: ${IMAGE_NAME}\"

            # Pull and run Docker container with specific image
            docker pull ${IMAGE_NAME}
            docker stop website-container-${HTTPS_PORT} || true
            docker rm website-container-${HTTPS_PORT} || true
            docker run -d --name website-container-${HTTPS_PORT} \
              -p ${HTTPS_PORT}:${HTTPS_PORT} \
              -v /etc/nginx/ssl/cert.pem:/etc/nginx/ssl/cert.pem:ro \
              -v /etc/nginx/ssl/key.pem:/etc/nginx/ssl/key.pem:ro \
              -e NODE_ENV=${NODE_ENV} \
              ${IMAGE_NAME}
          "
