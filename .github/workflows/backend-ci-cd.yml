name: Backend CI/CD

on:
  push:
    branches:
      - main
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches:
      - main
    types: [opened, synchronize, reopened]
    paths:
      - 'packages/backend/**'
      - '.github/workflows/backend-ci-cd.yml'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: ./packages/backend
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-backend:${{ github.sha }}
    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
    
    - name: Install kustomize
      run: |
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/

    - name: Set up kubeconfig
      run: |
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBE_CONFIG }}" > $HOME/.kube/config
        chmod 600 $HOME/.kube/config

    - name: Install yq
      run: |
        sudo wget -O /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.25.1/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq

    - name: Verify kubectl configuration
      run: kubectl cluster-info

    - name: Set deployment namespace and ports
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          echo "DEPLOY_NAMESPACE=test" >> $GITHUB_ENV
          echo "SERVICE_PORT=8080" >> $GITHUB_ENV
          echo "CONTAINER_PORT=3001" >> $GITHUB_ENV
        else
          echo "DEPLOY_NAMESPACE=default" >> $GITHUB_ENV
          echo "SERVICE_PORT=80" >> $GITHUB_ENV
          echo "CONTAINER_PORT=3000" >> $GITHUB_ENV
        fi

    - name: Create namespace if not exists
      run: |
        kubectl create namespace ${{ env.DEPLOY_NAMESPACE }} --dry-run=client -o yaml | kubectl apply -f -

    - name: Create or update JWT secret
      run: |
        kubectl create secret generic jwt-secret \
          --namespace ${{ env.DEPLOY_NAMESPACE }} \
          --from-literal=JWT_SECRET=${{ secrets.JWT_SECRET }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Create PostgreSQL Secret
      run: |
        kubectl create secret generic postgres-secret \
          --namespace=${{ env.DEPLOY_NAMESPACE }} \
          --from-literal=POSTGRES_DB=linguaquiz \
          --from-literal=POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          --from-literal=POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Wait for PostgreSQL Secret
      run: |
        timeout 30s bash -c 'while ! kubectl get secret postgres-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for PostgreSQL secret..."; sleep 2; done' || (echo "Timed out waiting for PostgreSQL secret" && exit 1)
      shell: bash

    - name: Wait for JWT Secret
      run: |
        timeout 30s bash -c 'while ! kubectl get secret jwt-secret --namespace ${{ env.DEPLOY_NAMESPACE }} &>/dev/null; do echo "Waiting for JWT secret..."; sleep 2; done' || (echo "Timed out waiting for JWT secret" && exit 1)
      shell: bash

    - name: Update manifests
      run: |
        cd packages/backend/k8s
        yq e '.images[0].newName = "${{ secrets.DOCKERHUB_USERNAME }}/lingua-quiz-backend"' -i kustomization.yaml
        yq e '.images[0].newTag = "${{ github.sha }}"' -i kustomization.yaml
        yq e '.metadata.namespace = "${{ env.DEPLOY_NAMESPACE }}"' -i deployment.yaml
        yq e '.metadata.namespace = "${{ env.DEPLOY_NAMESPACE }}"' -i postgres-deployment.yaml
        yq e '.metadata.namespace = "${{ env.DEPLOY_NAMESPACE }}"' -i service.yaml
        yq e '.spec.ports[0].port = ${{ env.SERVICE_PORT }}' -i service.yaml
        yq e '.spec.ports[0].targetPort = ${{ env.CONTAINER_PORT }}' -i service.yaml
        yq e '.spec.template.spec.containers[0].env += {"name": "PORT", "value": "${{ env.CONTAINER_PORT }}"}' -i deployment.yaml
        yq e '.spec.template.spec.containers[0].livenessProbe.httpGet.port = ${{ env.CONTAINER_PORT }}' -i deployment.yaml
        yq e '.spec.template.spec.containers[0].ports[0].containerPort = ${{ env.CONTAINER_PORT }}' -i deployment.yaml
        yq e '.spec.template.spec.containers[0].readinessProbe.httpGet.port = ${{ env.CONTAINER_PORT }}' -i deployment.yaml

    - name: Deploy to Kubernetes
      run: |
        cd packages/backend/k8s
        kustomize build | kubectl apply -f -

    - name: Wait for postgres deployment to be ready
      run: |
        kubectl rollout status deployment/postgres -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s

    - name: Wait for app deployment to be ready
      run: |
        kubectl rollout status deployment/lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} --timeout=300s

    - name: Run Database Migrations
      run: |
        BACKEND_POD=$(kubectl get pods -l app=lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.items[0].metadata.name}")
        kubectl exec $BACKEND_POD -n ${{ env.DEPLOY_NAMESPACE }} -- \
          env DB_HOST=postgres \
              DB_PORT=5432 \
              POSTGRES_DB=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_DB}" | base64 --decode) \
              POSTGRES_USER=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_USER}" | base64 --decode) \
              POSTGRES_PASSWORD=$(kubectl get secret postgres-secret -n ${{ env.DEPLOY_NAMESPACE }} -o jsonpath="{.data.POSTGRES_PASSWORD}" | base64 --decode) \
          npm run migrate

    - name: Output Service URL
      run: |
        if [[ "${{ env.DEPLOY_NAMESPACE }}" == "test" ]]; then
          echo "Test Service URL: http://test-lingua-quiz-backend.${{ secrets.DOMAIN }}:8080"
          echo "Test Environment Variables:"
          echo "PORT=${{ env.CONTAINER_PORT }}"
        else
          echo "Production Service URL: http://lingua-quiz-backend.${{ secrets.DOMAIN }}"
          echo "Production Environment Variables:"
          echo "PORT=${{ env.CONTAINER_PORT }}"
        fi

    - name: Cleanup on failure
      if: failure()
      run: |
        echo "Deployment failed. Cleaning up resources..."
        kubectl delete deployment lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} --ignore-not-found
        kubectl delete service lingua-quiz-backend -n ${{ env.DEPLOY_NAMESPACE }} --ignore-not-found

        if [[ "${{ env.DEPLOY_NAMESPACE }}" == "test" ]]; then
          kubectl delete deployment postgres -n test --ignore-not-found
          kubectl delete service postgres -n test --ignore-not-found
          kubectl delete secret postgres-secret -n test --ignore-not-found
          kubectl delete secret jwt-secret -n test --ignore-not-found
          kubectl delete namespace test --ignore-not-found
        fi
        echo "Cleanup completed."
