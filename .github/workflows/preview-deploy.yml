name: Deploy Preview Environment

on:
  # Trigger after CI completes successfully on any PR
  workflow_run:
    workflows: ["CI"]
    types: [completed]

concurrency:
  group: preview-${{ github.event.workflow_run.pull_requests[0].number }}
  cancel-in-progress: true

env:
  GITOPS_REPO: nikolay-e/lingua-quiz-gitops

jobs:
  deploy-preview:
    # Only run on PRs when CI succeeds
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' &&
      github.event.workflow_run.pull_requests[0] != null
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read
      pull-requests: write

    steps:
      - name: Get PR details
        id: pr
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.workflow_run.pull_requests[0];
            const prNumber = pr.number;
            // Use the HEAD SHA that CI actually built with
            const ciSha = context.payload.workflow_run.head_sha;

            core.setOutput('number', prNumber);
            core.setOutput('ci_sha', ciSha);

            console.log(`PR #${prNumber}, CI commit SHA: ${ciSha}`);

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify images exist
        env:
          IMAGE_TAG: ${{ steps.pr.outputs.ci_sha }}
        run: |
          # shellcheck disable=SC2086
          echo "Verifying images are available for tag: ${IMAGE_TAG}"

          # Function to check if image exists with retries
          check_image() {
            local image="$1"
            local max_attempts=5
            local wait_seconds=10

            for attempt in $(seq 1 "$max_attempts"); do
              echo "Attempt ${attempt}/${max_attempts}: Checking ${image}..."
              if docker manifest inspect "$image" > /dev/null 2>&1; then
                echo "✓ Image found: ${image}"
                return 0
              fi

              if [ "$attempt" -lt "$max_attempts" ]; then
                echo "Image not found yet, waiting ${wait_seconds}s before retry..."
                sleep "$wait_seconds"
              fi
            done

            echo "❌ Image not found after ${max_attempts} attempts: ${image}"
            return 1
          }

          # Check if backend image exists
          if ! check_image "ghcr.io/nikolay-e/lingua-quiz-app/lingua-quiz-backend:${IMAGE_TAG}"; then
            exit 1
          fi

          # Check if frontend image exists
          if ! check_image "ghcr.io/nikolay-e/lingua-quiz-app/lingua-quiz-frontend:${IMAGE_TAG}"; then
            exit 1
          fi

          echo "✓ All images verified and ready for deployment"

      - name: Checkout gitops repository
        uses: actions/checkout@v5
        with:
          repository: ${{ env.GITOPS_REPO }}
          token: ${{ secrets.GITOPS_PAT }}
          ref: main

      - name: Create preview Application
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          IMAGE_TAG: ${{ steps.pr.outputs.ci_sha }}
        run: |
          NAMESPACE="lingua-quiz-preview-pr-${PR_NUMBER}"
          PREVIEW_DOMAIN="${PR_NUMBER}.lingua-quiz.nikolay-eremeev.com"

          echo "Creating preview environment for PR #${PR_NUMBER}"
          echo "  Namespace: ${NAMESPACE}"
          echo "  Image tag: ${IMAGE_TAG}"
          echo "  URL: https://${PREVIEW_DOMAIN}"

          # Create Argo CD Application manifest
          mkdir -p clusters/previews
          cat > "clusters/previews/pr-${PR_NUMBER}.yaml" <<EOF
          apiVersion: argoproj.io/v1alpha1
          kind: Application
          metadata:
            name: lingua-quiz-preview-pr-${PR_NUMBER}
            namespace: argocd
            labels:
              preview-env: "true"
              pr-number: "${PR_NUMBER}"
            finalizers:
              - resources-finalizer.argocd.argoproj.io
          spec:
            project: default
            source:
              repoURL: https://github.com/nikolay-e/lingua-quiz-gitops.git
              targetRevision: HEAD
              path: helm-charts/lingua-quiz-app
              helm:
                valueFiles:
                  - values.yaml
                  - values.preview.yaml
                values: |
                  imagePullSecrets:
                    - name: ghcr-secret
                  backend:
                    image:
                      repository: ghcr.io/nikolay-e/lingua-quiz-app/lingua-quiz-backend
                      tag: ${IMAGE_TAG}
                  frontend:
                    image:
                      repository: ghcr.io/nikolay-e/lingua-quiz-app/lingua-quiz-frontend
                      tag: ${IMAGE_TAG}
                  ingress:
                    host: ${PREVIEW_DOMAIN}
                  cors:
                    origins:
                      - https://${PREVIEW_DOMAIN}
            destination:
              server: https://kubernetes.default.svc
              namespace: ${NAMESPACE}
            syncPolicy:
              automated:
                prune: true
                selfHeal: true
              syncOptions:
                - CreateNamespace=true
                - ServerSideApply=true
              retry:
                limit: 3
                backoff:
                  duration: 5s
                  factor: 2
                  maxDuration: 3m
          EOF

      - name: Commit and push
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          IMAGE_TAG: ${{ steps.pr.outputs.head_sha }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add "clusters/previews/pr-${PR_NUMBER}.yaml"

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "feat: deploy preview environment for PR #${PR_NUMBER}

          Preview URL: https://${PR_NUMBER}.lingua-quiz.nikolay-eremeev.com
          Commit: ${IMAGE_TAG}

          🤖 Automated deployment via GitHub Actions"

            git push origin main
            echo "✓ Preview configuration committed to gitops repository"
            echo "✓ Argo CD will automatically sync and deploy the preview environment"
          fi

      - name: Comment on PR
        env:
          PR_NUMBER: ${{ steps.pr.outputs.number }}
          IMAGE_TAG: ${{ steps.pr.outputs.head_sha }}
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = parseInt(process.env.PR_NUMBER);
            const imageTag = process.env.IMAGE_TAG;
            const previewUrl = `https://${prNumber}.lingua-quiz.nikolay-eremeev.com`;

            const comment = `## 🚀 Preview Environment Deploying

            Your preview environment is being deployed!

            **Preview URL:** ${previewUrl}

            **Status:** Argo CD is syncing (~2 minutes)

            The deployment includes:
            - ✅ Dedicated namespace
            - ✅ Isolated database
            - ✅ SSL certificate (auto-provisioned)
            - ✅ Image: \`${imageTag}\`

            Updates will be automatic when you push new commits.
            `;

            // Find existing preview comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Preview Environment')
            );

            if (botComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: comment
              });
            }
